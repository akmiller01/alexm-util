# }
# return(codelists)
listOfLists <- list()
lolIndex <- 1
ds <- imfDS(db.key)
codelists <- ds$CodeLists$CodeList
for(codelist in codelists){
dim.name <- codelist$Name$`#text`
dim.code <- codelist$`@id`
for(code in codelist$Code){
code.val <- code$`@value`
code.desc <- code$Description$`#text`
df <- data.frame(dim.name,dim.code,code.val,code.desc)
listOfLists[[lolIndex]] <- df
lolIndex <- lolIndex + 1
}
}
output.df <- rbindlist(listOfLists)
return(output.df)
}
imfCD <- function(db.key,params="",startPeriod="",endPeriod=""){
user_agent = "di-imf-rsdmx/0.0.1"
cd_base_url = "http://dataservices.imf.org/REST/SDMX_JSON.svc/CompactData/"
cd_url <- paste0(cd_base_url,db.key,"/",params)
if(startPeriod!=""){
if(endPeriod!=""){
cd_url <- paste0(cd_url,"?startPeriod=",startPeriod,"&endPeriod=",endPeriod)
}
else{
cd_url <- paste0(cd_url,"?startPeriod=",startPeriod)
}
}else{
if(endPeriod!=""){
cd_url <- paste0(cd_url,"?endPeriod=",endPeriod)
}
}
cdContent <- getURL(cd_url, httpheader = list('User-Agent' = user_agent), ssl.verifypeer = FALSE, .encoding = "UTF-8")
Sys.sleep(1)
cd <- fromJSON(cdContent)
return(cd)
}
imfDF <- function(db.key,params="",startPeriod="",endPeriod="",reshape=TRUE){
dfList <- list()
dfIndex <- 1
cd <- imfCD(db.key,params,startPeriod,endPeriod)
series <- cd$CompactData$DataSet$Series
# Special case for series being a single list
if("@FREQ" %in% names(series)){
df <- data.frame(db.key)
for(var in names(series)){
# For those not named "obs" we can assign them to vars right away
if(var!="Obs"){
value = series[[var]]
if(typeof(value)=="character"){
df[[var]] <- series[[var]]
}
# Otherwise, we need to check whether "Obs" is a list of observations,
# or a list containing the attributes of one observation
}else{
obs = series[[var]]
single.ob <- FALSE
for(ob in obs){
if(typeof(ob)=="list"){
multivar <- paste0("value.",ob$`@TIME_PERIOD`)
df[[multivar]] <- ob$`@OBS_VALUE`
}else{
single.ob <- TRUE
}
}
if(single.ob){
multivar <- paste0("value.",obs$`@TIME_PERIOD`)
df[[multivar]] <- obs$`@OBS_VALUE`
}
}
}
dfList[[dfIndex]] <- df
dfIndex = dfIndex + 1
}else{
# Each element is like a row, except it can contain more than one observation
for(element in series){
df <- data.frame(db.key)
for(var in names(element)){
# For those not named "obs" we can assign them to vars right away
if(var!="Obs"){
value = element[[var]]
if(typeof(value)=="character"){
df[[var]] <- element[[var]]
}
# Otherwise, we need to check whether "Obs" is a list of observations,
# or a list containing the attributes of one observation
}else{
obs = element[[var]]
single.ob <- FALSE
for(ob in obs){
if(typeof(ob)=="list"){
multivar <- paste0("value.",ob$`@TIME_PERIOD`)
df[[multivar]] <- ob$`@OBS_VALUE`
}else{
single.ob <- TRUE
}
}
if(single.ob){
multivar <- paste0("value.",obs$`@TIME_PERIOD`)
df[[multivar]] <- obs$`@OBS_VALUE`
}
}
}
dfList[[dfIndex]] <- df
dfIndex = dfIndex + 1
}
}
full.df <- data.frame(rbindlist(dfList,fill=TRUE))
#Reorder the value columns if at least 2 and we're counting years
if(sum(grepl("value.",names(full.df)))>1 & substr(params,1,1)=="A"){
valueOrder <- order(as.numeric(substr(names(full.df)[which(substr(names(full.df),1,6)=="value.")],7,10)))
full.df[,(length(full.df)+1-length(valueOrder)):length(full.df)] <- full.df[,(length(full.df)+1-length(valueOrder)):length(full.df)][,valueOrder]
}
if(reshape){
full.df <- reshape(full.df,idvar="X.REF_AREA",timevar="year",direction="long",varying=names(full.df)[which(substr(names(full.df),1,6)=="value.")])
}
return(full.df)
}
rm(list.of.packages,new.packages)
### How to use:
#1. Get db.keys from imfDB function
# dbs <- imfDB()
#2. Use db.key from step 1 to find codelist using imfCL function
# gfsrCL <- imfCL("GFSR")
#3. Use codelist dimensions from step 2 to construct parameters for imfDF function
# gfsrDF <- imfDF("GFSR","A..S1311B.XDC.W0_S1_G1","2000","2017")
### How to construct imfDF params argument:
# {frequency}.{item1 from dimension1}+{item2 from dimension1}+{item N from dimension1}.{item1 from
# dimension2}+{item2 from dimension2}+{item M from dimension2}.{etc}
# Leave a blank string for wildcard filters. In the above example "A..S1311B" is filtering wildcard for
# the second dimension (ref_area)
### How to use intermediate functions (not exported, check source):
# gfsrDS <- imfDS("GFSR")
# cd <- imfCD("GFSR","A..S1311B.XDC.W0_S1_G1","2014","2016")
### How to source this package:
#source("https://raw.githubusercontent.com/akmiller01/alexm-util/master/DevInit/R/imf_sdmx_func.R")
### Help docs:
# http://datahelp.imf.org/knowledgebase/articles/788715-data-services-how-to-get-the-code-of-a-dataset-an
# http://datahelp.imf.org/knowledgebase/articles/667681-using-json-restful-web-service
# http://dataservices.imf.org/REST/SDMX_JSON.svc/help
# http://datahelp.imf.org/knowledgebase/articles/937155-how-to-query-large-datasets-with-data-services
df <- imfDF("MCDREO","A..GGRXO_GDPXO_PT","2000","2020",reshape=FALSE)
View(df)
df <- imfDF("MCDREO","A..GGRXO_GDPXO_PT","2000","2020")
View(df)
df <- imfDF("MCDREO","A..GGRXO_GDPXO_PT","2000","2020",reshape=FALSE)
names(df)
df <- imfDF("MCDREO","A..GGRXO_GDPXO_PT","2000","2020")
names(df)
View(df)
ae <- subset(df,X.REF_AREA=="AE")
plot(ae$value)
plot(ae$value,type="l")
plot(year~value,type="l",data=ae)
plot(value~year,type="l",data=ae)
source("C:/git/alexm-util/DevInit/R/imf_sdmx_func.R")
source("C:/git/alexm-util/DevInit/R/imf_sdmx_func.R")
df <- imfDF("MCDREO","A..GGRXO_GDPXO_PT","2000","2020",reorder=FALSE,reshape=TRUE)
ae <- subset(df,X.REF_AREA=="AE")
plot(value~year,type="l",data=ae)
df <- imfDF("MCDREO","A..GGRXO_GDPXO_PT","2000","2020")
ae <- subset(df,X.REF_AREA=="AE")
plot(value~year,type="l",data=ae)
cl <- imfCL("GFSR")
View(cl)
plot(df,aes(x=value,y=year,colour=X.REF_AREA,group=X.REF_AREA)) + geom_line()
ggplot(df,aes(x=value,y=year,colour=X.REF_AREA,group=X.REF_AREA)) + geom_line()
library(ggplot2)
ggplot(df,aes(x=value,y=year,colour=X.REF_AREA,group=X.REF_AREA)) + geom_line()
ggplot(df,aes(x=year,y=value,colour=X.REF_AREA,group=X.REF_AREA)) + geom_line()
unique(df$X.REF_AREA)
ggplot(subset(df,nchar(X.REF_AREA)==2),aes(x=year,y=value,colour=X.REF_AREA,group=X.REF_AREA)) + geom_line()
isos <- c("AE","AZ","DJ","EG")
ggplot(subset(df,X.REF_AREA %in% isos),aes(x=year,y=value,colour=X.REF_AREA,group=X.REF_AREA)) + geom_line()
isos <- c("AE","DJ","EG")
ggplot(subset(df,X.REF_AREA %in% isos),aes(x=year,y=value,colour=X.REF_AREA,group=X.REF_AREA)) + geom_line()
typeof(df$value)
df$value <- as.numeric(df$value)
isos <- c("AE","DJ","EG")
ggplot(subset(df,X.REF_AREA %in% isos),aes(x=year,y=value,colour=X.REF_AREA,group=X.REF_AREA)) + geom_line()
cl <- imfCL("MCDREO")
db <- imfDB()
aid_type_dictionary = list(
"A01" = "Aid type 1",
"A02" = "Aid type 2"
)
aid_type_dictionary[["A01"]]
aid_type_dictionary[["A01","A01"]]
aid_type_dictionary[[c("A01","A01")]]
?sapply
`[[`
?`[[`
vec = c("A01","A01")
aid_type_dictionary[vec]
vec = c("A01","A01","A02","A01")
aid_type_dictionary[vec]
recoded_vec = aid_type_dictionary[vec]
sapply(recoded_vec,`[[`,i=1)
recode = function(vec,dictionary){
return(sapply(recoded_vec,`[[`,i=1))
}
recoded_vec = recode(vec,aid_type_dictionary)
recoded_vec
vec = c("A01","A01","A02","A01",NA)
vec
aid_type_dictionary = list(
"A01" = "General budget support",
"A02" = "Sector budget support",
"B01" = "Core support to NGOs, other private bodies, PPPs and research institutes",
"B02" = "Core contributions to multilateral institutions",
"B03" = "Contributions to  specific-purpose programmes and funds managed by international organisations (multilateral, INGO)",
"B04" = "Basket funds/pooled funding",
"C01" = "Project-type interventions",
"D01" = "Donor country personnel",
"D02" = "Other technical assistance",
"E01" = "Scholarships/training in donor country",
"E02" = "Imputed student costs",
"F01" = "Debt relief",
"G01" = "Administrative costs not included elsewhere",
"H01" = "Development awareness",
"H02" = "Refugees in donor countries"
)
recode = function(vec,dictionary){
recoded_vec = dictionary[vec]
return(sapply(recoded_vec,`[[`,i=1))
}
recode(vec,aid_type_dictionary)
recode = function(vec,dictionary){
recoded_vec = dictionary[vec]
atomic_recoded_vec = sapply(recoded_vec,`[[`,i=1)
atomic_recoded_vec[which(is.null(atomic_recoded_vec))] = NA
return(atomic_recoded_vec)
}
vec = c("A01","A01","A02","A01",NA)
recode(vec,aid_type_dictionary)
is.atomic
is.atomic(recoded_vec)
dictionary = aid_type_dictionary
recoded_vec = dictionary[vec]
atomic_recoded_vec = sapply(recoded_vec,`[[`,i=1)
atomic_recoded_vec[which(is.null(atomic_recoded_vec))] = NA
atomic_recoded_vec
sapply(atomic_recoded_vec,`[[`,i=1)
sapply(atomic_recoded_vec,`[`,i=1)
unlist(atomic_recoded_vec)
recode = function(vec,dictionary){
recoded_vec = dictionary[vec]
atomic_recoded_vec = unlist(recoded_vec)
atomic_recoded_vec[which(is.null(atomic_recoded_vec))] = NA
return(atomic_recoded_vec)
}
recode(vec,dictionary)
recoded_vec = dictionary[vec]
recoded_vec
atomic_recoded_vec = unlist(recoded_vec)
atomic_recoded_vec
atomic_recoded_vec = data.table(recoded_vec)
library(data.table)
atomic_recoded_vec = data.table(recoded_vec)
View(atomic_recoded_vec)
atomic_recoded_vec[which(is.null(atomic_recoded_vec))] = NA
View(atomic_recoded_vec)
typeof(atomic_recoded_vec$recoded_vec)
NULL2NA <- function(x){
if(is.null(x)){return(NA)}
else{return(x)}
}
NULL2NA(NULL)
sapply(recoded_vec,NULL2NA)
atomic_recoded_vec = unlist(sapply(recoded_vec,NULL2NA))
atomic_recoded_vec
recode = function(vec,dictionary){
recoded_vec = dictionary[vec]
atomic_recoded_vec = unlist(sapply(recoded_vec,NULL2NA))
atomic_recoded_vec[which(is.null(atomic_recoded_vec))] = NA
return(atomic_recoded_vec)
}
recode(vec,dictionary)
crs = recode(vec,dictionary)
is.na(NULL)
is.na(NA)
is.null(NA)
library(data.table)
library(ggplot2)
library(plyr)
library(Hmisc)
require(gtools)
library(varhandle)
setwd("C:/Users/Alex/Documents/Data/P20/Meta")
load("total_tab_data.RData")
all.isos <- read.csv("C:/Users/Alex/Documents/Data/P20/Meta/all.isos.csv",na.strings="")
dat.filenames <- unique(data.frame(data.total)[c("filename")])
dat.filenames <- merge(dat.filenames,all.isos,all.x=TRUE)
dat.isos <- unfactor(unique(dat.filenames$iso2))
surveyless <- read.csv("C:/git/alexm-util/DevInit/P20-vis/venn/raw_povcalnet.csv",na.strings="",as.is=TRUE)
surveyless <- subset(surveyless,!(iso2 %in% dat.isos))
# data_total_blank = data.total[0,]
# surveyless_survey <- rbind(surveyless,data_total_blank,fill=TRUE)
data.total <- rbind(data.total,surveyless,fill=TRUE)
data.total$sex <- factor(data.total$sex,levels=c("Male","Female"))
countryMeta <- read.csv("headcounts.csv",as.is=TRUE)
countryMeta <- transform(countryMeta,
under5 = male.under5+female.under5
,over25 = female.25.plus+male.25.plus
,female.25.49 = female.25.plus-female.49.plus
)
# countryMeta_blank = data.table(countryMeta[0,])
# surveyless_meta <- rbind(surveyless,countryMeta_blank,fill=TRUE)
countryMeta <- data.frame(rbind(data.table(countryMeta),surveyless,fill=TRUE))
weighted.percentile <- function(x,w,prob,na.rm=TRUE){
df <- data.frame(x,w)
if(na.rm){
df <- df[which(complete.cases(df)),]
}
#Sort
df <- df[order(df$x),]
sumw <- sum(df$w)
df$cumsumw <- cumsum(df$w)
#For each percentile
cutList <- c()
cutNames <-c()
for(i in 1:length(prob)){
p <- prob[i]
pStr <- paste0(round(p*100,digits=2),"%")
sumwp <- sumw*p
df$above.prob <- df$cumsumw>=sumwp
thisCut <- df$x[which(df$above.prob==TRUE)[1]]
cutList <- c(cutList,thisCut)
cutNames <- c(cutNames,pStr)
}
names(cutList) <- cutNames
return(cutList)
}
triple.cross <- function(x.vals,y.vals,z.vals,w,comb.v){
if(length(w)>1){
x = weighted.mean(x.vals,w,na.rm=TRUE)
y = weighted.mean(y.vals,w,na.rm=TRUE)
z = weighted.mean(z.vals,w,na.rm=TRUE)
xy = weighted.mean(x.vals&y.vals,w,na.rm=TRUE)
yz = weighted.mean(y.vals&z.vals,w,na.rm=TRUE)
zx = weighted.mean(z.vals&x.vals,w,na.rm=TRUE)
xyz = weighted.mean(x.vals&y.vals&z.vals,w,na.rm=TRUE)
}else{
x = x.vals[1]
y = y.vals[1]
z = z.vals[1]
if("p20" %in% comb.v[c(1,2)] && "non.p20" %in% comb.v[c(1,2)]){
xy = 0
}else if("ext" %in% comb.v[c(1,2)] && "non.p20" %in% comb.v[c(1,2)]){
xy = 0
}else
# if("p20" %in% comb.v[c(1,2)] && "ext" %in% comb.v[c(1,2)])
{
xy = min(x.vals[1],y.vals[1])
}
if("p20" %in% comb.v[c(2,3)] && "non.p20" %in% comb.v[c(2,3)]){
yz = 0
}else if("ext" %in% comb.v[c(2,3)] && "non.p20" %in% comb.v[c(2,3)]){
yz = 0
}else
# if("p20" %in% comb.v[c(2,3)] && "ext" %in% comb.v[c(2,3)])
{
yz = min(y.vals[1],z.vals[1])
}
if("p20" %in% comb.v[c(1,3)] && "non.p20" %in% comb.v[c(1,3)]){
zx = 0
}else if("ext" %in% comb.v[c(1,3)] && "non.p20" %in% comb.v[c(1,3)]){
zx = 0
}else
# if("p20" %in% comb.v[c(1,3)] && "ext" %in% comb.v[c(1,3)])
{
zx = min(x.vals[1],z.vals[1])
}
if(("p20" %in% comb.v || "ext" %in% comb.v) && "non.p20" %in% comb.v){
xyz = 0
}else{
xyz = min(x.vals[1],y.vals[1],z.vals[1])
}
}
return(
list(
x = x
,y = y
,z = z
,xy = xy
,yz = yz
,zx = zx
,xyz = xyz
)
)
}
opposite = function(x){
if(is.na(x)){
return(NA)
}else if(x==0){
return(1)
}else{
return(max(1-x,0))
}
}
venn.data <- list()
venn.data.index <- 1
filenames <- countryMeta$filename
for(i in 1:length(filenames)){
this.filename <- filenames[i]
popset <- subset(countryMeta,filename==this.filename)[c("pop.total","under5","over25","female.25.49","female.15.49")]
message(this.filename)
dat <- subset(data.total,filename==this.filename)
if(nrow(dat)>0){
indicators <- data.frame(list(
urban = dat$urban==1
,rural = !dat$urban
,no.educ = dat$educ=="No education, preschool"
,primary = dat$educ=="Primary" | dat$educ=="Secondary" | dat$educ=="Higher"
,secondary = dat$educ=="Secondary" | dat$educ=="Higher"
,higher = dat$educ=="Higher"
,zeroto14 = dat$age>=0&dat$age<15
,fifteento59 = dat$age>=15&dat$age<=59
,gt59 = dat$age>59
,male = dat$sex=="Male"
,female = dat$sex=="Female"
,p20 = dat$p20
,non.p20 = sapply(dat$p20,opposite)
,ext = dat$ext
,no.birth.reg = dat$birth.reg==0
,stunted = dat$stunting!="Not stunted"
,no.skilled.attendant = dat$skilled.births==0
,blank1 = TRUE
,blank2 = TRUE
))
caveats <- data.frame(list(
urban = TRUE
,rural = TRUE
,no.educ = dat$age>=25
,primary = dat$age>=25
,secondary = dat$age>=25
,higher = dat$age>=25
,zeroto14 = TRUE
,fifteento59 = TRUE
,gt59 = TRUE
,male = TRUE
,female = TRUE
,p20 = TRUE
,non.p20 = TRUE
,ext = TRUE
,no.birth.reg = dat$age<5
,stunted = dat$age<5
,no.skilled.attendant = dat$sex=="Female"&dat$age>=15&dat$age<=49&dat$all.births>0
,blank1 = TRUE
,blank2 = TRUE
,weights = !is.na(dat$weights)
))
combs <- combinations(n=length(names(indicators)),r=3,v=names(indicators))
for(j in 1:nrow(combs)){
comb.name = paste(combs[j,],collapse="_")
comb.v = c(combs[j,1],combs[j,2],combs[j,3])
valid.rows = caveats[combs[j,]][,1]&caveats[combs[j,]][,2]&caveats[combs[j,]][,3]&caveats["weights"]
valid.data <- indicators[which(valid.rows==TRUE),]
valid.weights <- dat$weights[which(valid.rows==TRUE)]
venn.segments <- triple.cross(valid.data[combs[j,1]][[1]],valid.data[combs[j,2]][[1]],valid.data[combs[j,3]][[1]],valid.weights,comb.v)
venn.df <- data.frame(list(filename=this.filename,indicator1=combs[j,1],indicator2=combs[j,2],indicator3=combs[j,3],venn.segments))
if("no.educ" %in% combs[j,] |
"primary" %in% combs[j,] |
"secondary" %in% combs[j,] |
"higher" %in% combs[j,]){
if("no.skilled.attendant" %in% combs[j,]){
pop <- popset$female.25.49[1]
}else{
pop <- popset$over25[1]
}
}else if("no.birth.reg" %in% combs[j,] |
"stunted" %in% combs[j,]){
pop <- popset$under5[1]
}else if("no.skilled.attendant" %in% combs[j,]){
pop <- popset$female.15.49[1]
}else{
pop <- popset$pop.total[1]
}
if(is.na(pop)){pop <- popset$pop.total[1]}
venn.df$pop <- pop
venn.data[[venn.data.index]] <- venn.df
venn.data.index <- venn.data.index + 1
}
}
}
all.venn <- rbindlist(venn.data)
# world <- all.venn[,.(
#   x = weighted.mean(x,pop,na.rm=TRUE)
#   ,y = weighted.mean(y,pop,na.rm=TRUE)
#   ,z = weighted.mean(z,pop,na.rm=TRUE)
#   ,xy = weighted.mean(xy,pop,na.rm=TRUE)
#   ,yz = weighted.mean(yz,pop,na.rm=TRUE)
#   ,zx = weighted.mean(zx,pop,na.rm=TRUE)
#   ,xyz = weighted.mean(xyz,pop,na.rm=TRUE)
#   ,pop = sum(as.numeric(pop),na.rm=TRUE)
# ),by=.(indicator1,indicator2,indicator3)]
# world$filename <- "world"
# all.venn <- rbind(all.venn,world)
all.isos <- read.csv("C:/Users/Alex/Documents/Data/P20/Meta/all.isos.csv",na.strings="")
all.isos <- rbind(all.isos,data.table(surveyless),fill=TRUE)
all.isos <- data.frame(all.isos)[c("filename","iso2","year")]
all.venn.joined <- join(all.venn,all.isos,by="filename")
all.venn.joined$iso2 <- unfactor(all.venn.joined$iso2)
# all.venn.joined$iso2[which(all.venn.joined$filename=="world")] <- "WD"
# all.venn.joined$year[which(all.venn.joined$filename=="world")] <- weighted.mean(all.venn.joined$year,all.venn.joined$pop,na.rm=TRUE)
setwd("C:/git/alexm-util/DevInit/P20-vis/venn/")
write.csv(all.venn.joined,"all.venn.unrounded.dan.csv",row.names=FALSE,na="")
View(all.venn.joined)
