row[[1]][6][[1]]
length(row)
row
row[[1]]
length(row[[1]])
row[[1]]
row[[1]][[1]]
row[[1]][[2]]
row[[1]][[3]]
attributes[[1]]
attributes[[1]]$values
attributes[[1]]$values[[1]]
attributes[[1]]$values[[2]]
attributes[[1]]$values[[1]]
attributes[[2]]$values[[1]]
attributes[[1]]$values[[1]]
attributes[[1]]
attributes
attributes[[1]]
attributes[[2]]
attributes[[3]]
attributes[[2]]
attributes[[2]]$values
attributes[[1]]$values
attributes[[2]]$values
attributes[[3]]$values
attributes[[4]]$values
attributes[[5]]$values
attributes[[6]]$values
attributes[[2]]$values
length(attributes[[2]]$values)
length(attributes[[1]]$values)
list()
list("id")
list("id":1)
list("id"=1)
list("id","name")
list(NA)
attributes[[1]]$values
row
row[[1]]
View(data)
ndim <- length(sapply(dimensions, "[[", 2))
natt <- length(sapply(attributes, "[[", 1))
natt <- 1+length(sapply(attributes, "[[", 1))
ncol <- ndim+natt
data <- setNames(data.frame(matrix(ncol = ncol, nrow = 0)),names)
View(data)
names(data)
names
names <- c(sapply(dimensions, "[[", 2),"OBS_VALUE",sapply(attributes, "[[", 1))
ndim <- length(sapply(dimensions, "[[", 2))
#Placeholder for OBS_VALUE
natt <- 1+length(sapply(attributes, "[[", 1))
ncol <- ndim+natt
#Set column names. We've arbitrarily put dimensions first and attributes second
data <- setNames(data.frame(matrix(ncol = ncol, nrow = 0)),names)
names(data)
ncol
ndim
ndim+1
names(data)[ndim+1]
row[[1]]
row[[1]][[1]]
1
j
row[[i]][[j]]
1 -> j
row[[i]][[j]]
i
row[[1]][[j]]
ndim+j
row[[1]]
row[[1]][[3]]
is.NULL(row[[1]][[3]])
??NULL
is.null(row[[1[[3]]]])
is.null(row[[1]][[3]])
i
j
j>1
j = 2
attributeReference <- attributes[[j-1]]$values
j
attributeReference <- attributes[[j-1]]$values
attributeIndex <- row[[1]][[j]]
attributeReference
as.float()
as.double()
attributeIndex <- as.integer(row[[1]][[j]])+1
is.null(attributeIndex)
attributeValue <- attributeReference[[attributeIndex]]
attrivuteValue
attributeReference[[1]]
attributeValue
attributeValue[[1]]
attributeValue[[2]]
attributeValue <- attributeReference[[attributeIndex]][[2]]
#Parse raw data
for(i in 1:length(rawData)){
row <- rawData[i]
#First, take the row names (dimensions), split them out, and parse them
rawDimensions <- names(row)
splitDimensions <- strsplit(rawDimensions,":")[[1]]
for(j in 1:length(splitDimensions)){
dimensionReference <- dimensions[[j]]$values
dimensionIndex <- as.integer(splitDimensions[j])+1
dimensionValue <- dimensionReference[[dimensionIndex]][[2]]
#observation i, at column j is equal to 'dimensionValue', the +1 in the index corrects for how R indexes
#I picked [[2]] for "name", if you want "id" it needs to be [[1]]
data[i,j] <- dimensionValue
}
for(j in 1:length(row[[1]])){
if(j>1){
attributeReference <- attributes[[j-1]]$values
attributeIndex <- as.integer(row[[1]][[j]])+1
if(is.null(attributeIndex)){
#Case for when null crops up in the value (when there aren't any options)
attributeValue <- NA
}else{
attributeValue <- attributeReference[[attributeIndex]][[2]]
#I picked [[2]] for "name", if you want "id" it needs to be [[1]]
}
}else{
#The first one is just the value, it doesn't have a structure
attributeValue <- as.double(row[[1]][[j]])
}
#We have to add ndim to account for the fact that we've shifted the attributes to the back
data[i,ndim+j] <- attributeValue
}
}
i
j
attributeReference
attributeIndex
row[[1]][[j]]
row
j
attributeIndex
for(i in 1:length(rawData)){
row <- rawData[i]
#First, take the row names (dimensions), split them out, and parse them
rawDimensions <- names(row)
splitDimensions <- strsplit(rawDimensions,":")[[1]]
for(j in 1:length(splitDimensions)){
dimensionReference <- dimensions[[j]]$values
dimensionIndex <- as.integer(splitDimensions[j])+1
dimensionValue <- dimensionReference[[dimensionIndex]][[2]]
#observation i, at column j is equal to 'dimensionValue', the +1 in the index corrects for how R indexes
#I picked [[2]] for "name", if you want "id" it needs to be [[1]]
data[i,j] <- dimensionValue
}
for(j in 1:length(row[[1]])){
if(j>1){
attributeReference <- attributes[[j-1]]$values
rawAttIndex <- row[[1]][[j]]
if(is.null(rawAttIndex)){
#Case for when null crops up in the value (when there aren't any options)
attributeValue <- NA
}else{
attributeIndex <- as.integer(rawAttIndex)+1
attributeValue <- attributeReference[[attributeIndex]][[2]]
#I picked [[2]] for "name", if you want "id" it needs to be [[1]]
}
}else{
#The first one is just the value, it doesn't have a structure
attributeValue <- as.double(row[[1]][[j]])
}
#We have to add ndim to account for the fact that we've shifted the attributes to the back
data[i,ndim+j] <- attributeValue
}
}
View(data)
sum(data$OBS_VALUE)
sum(sdmxData$OBS_VALUE)
names(sdmxData)
#check the presence of a BOM
BOM <- "\ufeff"
if(attr(regexpr(BOM, content), "match.length") != - 1){
content <- gsub(BOM, "", content)
}
#Parse JSON
rawJson <- fromJSON(content)
#Extract data
rawData <- rawJson$dataSets[[1]]$observations
#Extract structure
rawStructure <- rawJson$structure
#dimensions are coded in row names (e.g. 0:0:0:0:0:0)
dimensions <- rawStructure$dimensions[[1]]
#attributes are coded in values, with [1] being obs_value, and all else as defined by this variable
attributes <- rawStructure$attributes$observation
#column names are derived from both dimensions and attributes
names <- c(sapply(dimensions, "[[", 2),"obsValue",sapply(attributes, "[[", 1))
ndim <- length(sapply(dimensions, "[[", 2))
#Placeholder for OBS_VALUE
natt <- 1+length(sapply(attributes, "[[", 1))
ncol <- ndim+natt
#Set column names. We've arbitrarily put dimensions first and attributes second
data <- setNames(data.frame(matrix(ncol = ncol, nrow = 0)),names)
#Parse raw data
for(i in 1:length(rawData)){
row <- rawData[i]
#First, take the row names (dimensions), split them out, and parse them
rawDimensions <- names(row)
splitDimensions <- strsplit(rawDimensions,":")[[1]]
for(j in 1:length(splitDimensions)){
dimensionReference <- dimensions[[j]]$values
dimensionIndex <- as.integer(splitDimensions[j])+1
dimensionValue <- dimensionReference[[dimensionIndex]][[2]]
#observation i, at column j is equal to 'dimensionValue', the +1 in the index corrects for how R indexes
#I picked [[2]] for "name", if you want "id" it needs to be [[1]]
data[i,j] <- dimensionValue
}
for(j in 1:length(row[[1]])){
if(j>1){
attributeReference <- attributes[[j-1]]$values
rawAttIndex <- row[[1]][[j]]
if(is.null(rawAttIndex)){
#Case for when null crops up in the value (when there aren't any options)
attributeValue <- NA
}else{
attributeIndex <- as.integer(rawAttIndex)+1
attributeValue <- attributeReference[[attributeIndex]][[2]]
#I picked [[2]] for "name", if you want "id" it needs to be [[1]]
}
}else{
#The first one is just the value, it doesn't have a structure
attributeValue <- as.double(row[[1]][[j]])
}
#We have to add ndim to account for the fact that we've shifted the attributes to the back
data[i,ndim+j] <- attributeValue
}
}
View(data)
sum(sdmxData$obsValue)
sum(data$obsValue)
names(data)
names(data)[which(names(data)=="Year")]
names(data)[which(names(data)=="Year")] <- "obsTime"
names(data)
#Necessary libraries
library(RCurl)
library(rjson)
OECD <- function(url){
content <- getURL(url, httpheader = list('User-Agent' = 'rsdmx-json/0.0.1'), ssl.verifypeer = FALSE, .encoding = "UTF-8")
BOM <- "\ufeff"
if(attr(regexpr(BOM, content), "match.length") != - 1){
content <- gsub(BOM, "", content)
}
rawJson <- fromJSON(content)
rawData <- rawJson$dataSets[[1]]$observations
rawStructure <- rawJson$structure
dimensions <- rawStructure$dimensions[[1]]
attributes <- rawStructure$attributes$observation
names <- c(sapply(dimensions, "[[", 2),"obsValue",sapply(attributes, "[[", 1))
ndim <- length(sapply(dimensions, "[[", 2))
natt <- 1+length(sapply(attributes, "[[", 1))
ncol <- ndim+natt
data <- setNames(data.frame(matrix(ncol = ncol, nrow = 0)),names)
for(i in 1:length(rawData)){
row <- rawData[i]
rawDimensions <- names(row)
splitDimensions <- strsplit(rawDimensions,":")[[1]]
for(j in 1:length(splitDimensions)){
dimensionReference <- dimensions[[j]]$values
dimensionIndex <- as.integer(splitDimensions[j])+1
dimensionValue <- dimensionReference[[dimensionIndex]][[2]]
data[i,j] <- dimensionValue
}
for(j in 1:length(row[[1]])){
if(j>1){
attributeReference <- attributes[[j-1]]$values
rawAttIndex <- row[[1]][[j]]
if(is.null(rawAttIndex)){
attributeValue <- NA
}else{
attributeIndex <- as.integer(rawAttIndex)+1
attributeValue <- attributeReference[[attributeIndex]][[2]]
}
}else{
attributeValue <- as.double(row[[1]][[j]])
}
data[i,ndim+j] <- attributeValue
}
}
names(data)[which(names(data)=="Year")] <- "obsTime"
return(data)
}
url <- "http://stats.oecd.org/SDMX-JSON/data/TABLE1/20005+20001.1.5+1010+2102.1121+1122.A+D+N/all?startTime=2005&endTime=2014&dimensionAtObservation=allDimensions"
data <- OECD(url)
url <- "http://stats.oecd.org/SDMX-JSON/data/TABLE1/20005+20001+801+1+2+301+68+3+18+4+5+40+20+21+6+701+742+22+7+820+8+76+9+69+61+50+10+11+12+302+20002+918+20006+72+62+30+82+75+546+552+83+70+84+45+77+87+566+732+764+55+576+20007.1.5+1010+1015+1100+1110+1120+1200+1210+1211+1212+1213+1214+1220+1230+1300+1310+1311+1320+1330+1301+1400+1410+1420+1500+1510+1520+1600+1610+1611+1612+1613+1614+1620+1621+1622+1623+1624+1630+1640+1700+1800+1810+1820+1900+1999+99999+1901+1902+1903+1904+1905+1906+60+70+2000+2100+2101+2102+2103+2104+547+2105+2106+2107+2108+2110+2901+2902+230+235+240+265+266+294+291+292+293+280+287+300+301+302+310+303+295+299+298+102+325+326+327+795+800+805+786+330+332+340+345+353+384+751+752+753+386+756+761+388+389+103+359+415+425+420+207+1+2+3+4.1121+1122+1120+1130+1140+1151+1152+1150.A+D+N/all?startTime=2005&endTime=2014&dimensionAtObservation=allDimensions"
data <- OECD(url)
View(data)
content <- getURL(url, httpheader = list('User-Agent' = 'rsdmx-json/0.0.1'), ssl.verifypeer = FALSE, .encoding = "UTF-8")
BOM <- "\ufeff"
if(attr(regexpr(BOM, content), "match.length") != - 1){
content <- gsub(BOM, "", content)
}
rawJson <- fromJSON(content)
rawData <- rawJson$dataSets[[1]]$observations
rawStructure <- rawJson$structure
dimensions <- rawStructure$dimensions[[1]]
attributes <- rawStructure$attributes$observation
names <- c(sapply(dimensions, "[[", 2),"obsValue",sapply(attributes, "[[", 1))
ndim <- length(sapply(dimensions, "[[", 2))
natt <- 1+length(sapply(attributes, "[[", 1))
ncol <- ndim+natt
data <- setNames(data.frame(matrix(ncol = ncol, nrow = 0)),names)
for(i in 1:length(rawData)){
row <- rawData[i]
rawDimensions <- names(row)
splitDimensions <- strsplit(rawDimensions,":")[[1]]
for(j in 1:length(splitDimensions)){
dimensionReference <- dimensions[[j]]$values
dimensionIndex <- as.integer(splitDimensions[j])+1
dimensionValue <- dimensionReference[[dimensionIndex]][[2]]
data[i,j] <- dimensionValue
}
for(j in 1:length(row[[1]])){
if(j>1){
attributeReference <- attributes[[j-1]]$values
rawAttIndex <- row[[1]][[j]]
if(is.null(rawAttIndex)){
attributeValue <- NA
}else{
attributeIndex <- as.integer(rawAttIndex)+1
attributeValue <- attributeReference[[attributeIndex]][[2]]
}
}else{
attributeValue <- as.double(row[[1]][[j]])
}
data[i,ndim+j] <- attributeValue
}
}
length(rawData)
data <- setNames(data.frame(matrix(ncol = ncol, nrow = length(rawData))),names)
data <- setNames(data.frame(matrix(ncol = ncol, nrow = length(rawData))),names)
for(i in 1:length(rawData)){
row <- rawData[i]
rawDimensions <- names(row)
splitDimensions <- strsplit(rawDimensions,":")[[1]]
for(j in 1:length(splitDimensions)){
dimensionReference <- dimensions[[j]]$values
dimensionIndex <- as.integer(splitDimensions[j])+1
dimensionValue <- dimensionReference[[dimensionIndex]][[2]]
data[i,j] <- dimensionValue
}
for(j in 1:length(row[[1]])){
if(j>1){
attributeReference <- attributes[[j-1]]$values
rawAttIndex <- row[[1]][[j]]
if(is.null(rawAttIndex)){
attributeValue <- NA
}else{
attributeIndex <- as.integer(rawAttIndex)+1
attributeValue <- attributeReference[[attributeIndex]][[2]]
}
}else{
attributeValue <- as.double(row[[1]][[j]])
}
data[i,ndim+j] <- attributeValue
}
}
i
install.packages('timeline', repos='http://cran.r-project.org')
require(timeline)
data(ww2)
timeline(ww2, ww2.events, event.spots=2, event.label='', event.above=FALSE)
library(ggplot2)
timeset<-data.frame(year=c(1986,1995,2011,1990,1998,2010),text=c('I was born','Had a nice icecream','Spotted a dodo','First swim','Crashed my bicycle','Bought a helmet'),y=c(runif(3,.5,1),runif(3,-1,-.5)))
plot<-ggplot(timeset,aes(x=year,y=0))
plot<-plot+geom_segment(aes(y=0,yend=y,xend=year))
plot<-geom_text(aes(y=ytext,label=text),size=2.5,vjust=-1)
plot<-plot+geom_point(aes(y=y))
plot
plot<-plot+scale_y_continuous(limits=c(-2,2))
library(ggplot2)
timeset<-data.frame(year=c(1986,1995,2011,1990,1998,2010),text=c('I was born','Had a nice icecream','Spotted a dodo','First swim','Crashed my bicycle','Bought a helmet'),y=c(runif(3,.5,1),runif(3,-1,-.5)))
plot<-ggplot(timeset,aes(x=year,y=0))
+geom_segment(aes(y=0,yend=y,xend=year))
+geom_text(aes(y=ytext,label=text),size=2.5,vjust=-1)
+geom_point(aes(y=y))
+scale_y_continuous(limits=c(-2,2))
+geom_hline(y=0,size=1,color='purple')   #draw a vertical line
+geom_segment(x=2011.4,xend=2012.2,y=.2,yend=0,color='purple',size=1)
+geom_segment(x=2011.4,xend=2012.2,y=-.2,yend=0,color='purple',size=1) #drawing the actual arrow
library(ggplot2)
timeset<-data.frame(year=c(1986,1995,2011,1990,1998,2010),text=c('I was born','Had a nice icecream','Spotted a dodo','First swim','Crashed my bicycle','Bought a helmet'),y=c(runif(3,.5,1),runif(3,-1,-.5)))
plot<-ggplot(timeset,aes(x=year,y=0))+
geom_segment(aes(y=0,yend=y,xend=year))+
geom_text(aes(y=ytext,label=text),size=2.5,vjust=-1)+
geom_point(aes(y=y))+
scale_y_continuous(limits=c(-2,2))+
geom_hline(y=0,size=1,color='purple')+
geom_segment(x=2011.4,xend=2012.2,y=.2,yend=0,color='purple',size=1)+
geom_segment(x=2011.4,xend=2012.2,y=-.2,yend=0,color='purple',size=1) #drawing the actual arrow
plot
library(ggplot2)
timeset<-data.frame(year=c(1986,1995,2011,1990,1998,2010),text=c('I was born','Had a nice icecream','Spotted a dodo','First swim','Crashed my bicycle','Bought a helmet'),y=c(runif(3,.5,1),runif(3,-1,-.5)))
plot<-ggplot(timeset,aes(x=year,y=0))+
geom_segment(aes(y=0,yend=y,xend=year))+
geom_text(aes(y=text,label=text),size=2.5,vjust=-1)+
geom_point(aes(y=y))+
scale_y_continuous(limits=c(-2,2))+
geom_hline(y=0,size=1,color='purple')+
geom_segment(x=2011.4,xend=2012.2,y=.2,yend=0,color='purple',size=1)+
geom_segment(x=2011.4,xend=2012.2,y=-.2,yend=0,color='purple',size=1) #drawing the actual arrow
plot
plot<-ggplot(timeset,aes(x=year,y=0))
library(ggplot2)
timeset<-data.frame(year=c(1986,1995,2011,1990,1998,2010),text=c('I was born','Had a nice icecream','Spotted a dodo','First swim','Crashed my bicycle','Bought a helmet'),y=c(runif(3,.5,1),runif(3,-1,-.5)))
plot<-ggplot(timeset,aes(x=year,y=0))+
geom_segment(aes(y=0,yend=y,xend=year))+
geom_text(aes(y=y,label=text),size=2.5,vjust=-1)+
geom_point(aes(y=y))+
scale_y_continuous(limits=c(-2,2))+
geom_hline(y=0,size=1,color='purple')+
geom_segment(x=2011.4,xend=2012.2,y=.2,yend=0,color='purple',size=1)+
geom_segment(x=2011.4,xend=2012.2,y=-.2,yend=0,color='purple',size=1) #drawing the actual arrow
plot
library(ggplot2)
timeset<-data.frame(year=c(1986,1995,2011,1990,1998,2010),text=c('I was born','Had a nice icecream','Spotted a dodo','First swim','Crashed my bicycle','Bought a helmet'),y=c(runif(3,.5,1),runif(3,-1,-.5)))
plot<-ggplot(timeset,aes(x=year,y=0))+
geom_segment(aes(y=0,yend=y,xend=year))+
geom_text(aes(y=y,label=text),size=2.5,vjust=-1)+
geom_point(aes(y=y))+
scale_y_continuous(limits=c(-2,2))+
geom_hline(y=0,size=1,color='purple')+
geom_segment(x=2011.4,xend=2012.2,y=.2,yend=0,color='purple',size=1)+
geom_segment(x=2011.4,xend=2012.2,y=-.2,yend=0,color='purple',size=1) #drawing the actual arrow
plot
?grepl
outfilename <- "D:/Documents/data/APR_16_14_tsla.csv"
df <- read.csv(outfilename
,header=TRUE
,colClasses=c("myDate","numeric","character","numeric","numeric","numeric"))
timestamp <- paste0(
"\nExpiry: "
,df[1,1]
,"\nCalculated: "
,Sys.Date()
)
change_averages <- ddply(df,.(change,state),summarize,avg=mean(prob))
title <- paste0(
"Probability of up/neutral/down given percent change",
timestamp
)
p1 <- ggplot(data=change_averages,aes(x=change,y=avg,group=state,colour=state)) +
geom_line() +
geom_point() +
ggtitle(title)
p1
library(jsonlite)
library(foreach)
library(plyr)
byCountry2014 <- fromJSON("http://www.d-portal.org/q?from=act%2Ctrans%2Ccountry&limit=-1&select=country_code%2Csum_of_percent_of_trans_usd&groupby=country_code&trans_code=D%7CE&trans_day_gteq=2014-01-01&trans_day_lt=2015-01-01&reporting_ref=GB-1&view=publisher_countries&_=1441812516302")[[1]]
setwd("C:/git/alexm-util/DevInit/R/IDC/")
write.csv(byCountry2014,"byCountry2014.csv",row.names=FALSE,na="")
german2014 <- fromJSON("http://www.d-portal.org/q?from=act%2Ctrans%2Ccountry&limit=-1&select=country_code%2Csum_of_percent_of_trans_usd&groupby=country_code&trans_code=D%7CE&trans_day_gteq=2014-01-01&trans_day_lt=2015-01-01&reporting_ref=DE-1&view=publisher_countries&_=1441812516302")[[1]]
write.csv(german2014,"german2014.csv",row.names=FALSE,na="")
usa2014 <- fromJSON("http://www.d-portal.org/q?from=act%2Ctrans%2Ccountry&limit=-1&select=country_code%2Csum_of_percent_of_trans_usd&groupby=country_code&trans_code=D%7CE&trans_day_gteq=2014-01-01&trans_day_lt=2015-01-01&reporting_ref=US&view=publisher_countries&_=1441812516302")[[1]]
write.csv(usa2014,"usa2014.csv",row.names=FALSE,na="")
library(jsonlite)
library(foreach)
gbs <- c(
"GB-1"
,"GB-3"
,"GB-4"
,"GB-6"
,"GB-7"
,"GB-9"
,"GB-10"
,"XM-DAC-12-22"
,"GB-GOV-8"
,"GB-COH-RC000346"
)
empty <- fromJSON("http://www.d-portal.org/q?from=act%2Ctrans%2Csector&limit=-1&select=sector_code%2Csum_of_percent_of_trans_usd&groupby=sector_code&trans_code=D%7CE&trans_day_gteq=2014-01-01&trans_day_lt=2015-01-01&reporting_ref=GB-1&view=publisher_sectors&_=1441789807497")[[1]][0,]
empty$year <- double(0)
empty$donor <- character(0)
data <- foreach(i=1:length(gbs),.packages=c("jsonlite")
,.combine=rbind) %do% {
gb <- gbs[i]
statsUrl <- paste0("http://www.d-portal.org/q?select=stats&from=act&reporting_ref=",gb,"&view=publisher&_=1441790527948")
donorname <- fromJSON(statsUrl)[[1]]["MAX(reporting)"][1,1]
message(donorname)
url2013 <- paste0("http://www.d-portal.org/q?from=act%2Ctrans%2Csector&limit=-1&select=sector_code%2Csum_of_percent_of_trans_usd&groupby=sector_code&trans_code=D%7CE&trans_day_gteq=2013-01-01&trans_day_lt=2014-01-01&reporting_ref=",gb,"&view=publisher_sectors&_=1441789807495")
dat2013 <- fromJSON(url2013)[[1]]
dat2013$year <- 2013
dat2013$donor <- donorname
if(is.null(nrow(dat2013))){
dat2013 <- empty
}
url2014 <- paste0("http://www.d-portal.org/q?from=act%2Ctrans%2Csector&limit=-1&select=sector_code%2Csum_of_percent_of_trans_usd&groupby=sector_code&trans_code=D%7CE&trans_day_gteq=2014-01-01&trans_day_lt=2015-01-01&reporting_ref=",gb,"&view=publisher_sectors&_=1441789807497")
dat2014 <- fromJSON(url2014)[[1]]
dat2014$year <- 2014
dat2014$donor <- donorname
if(is.null(nrow(dat2014))){
dat2014 <- empty
}
url2015 <- paste0("http://www.d-portal.org/q?from=act%2Cbudget%2Csector&limit=-1&select=sector_code%2Csum_of_percent_of_budget_usd&budget_priority=1&groupby=sector_code&budget_day_end_gteq=2015-01-01&budget_day_end_lt=2016-01-01&reporting_ref=",gb,"&view=publisher_sectors&_=1441789807501")
dat2015 <- fromJSON(url2015)[[1]]
dat2015$year <- 2015
dat2015$donor <- donorname
names(dat2015)[2] <- "sum_of_percent_of_trans_usd"
if(is.null(nrow(dat2015))){
dat2015 <- empty
}
dat <- rbind(dat2013,dat2014,dat2015)
return(dat)
}
totals <- ddply(data,.(donor,year),summarize,sum=sum(sum_of_percent_of_trans_usd,na.rm=TRUE))
View(totals)
