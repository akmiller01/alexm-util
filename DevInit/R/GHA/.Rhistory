url2014 <- paste0("http://www.d-portal.org/q?from=act%2Ctrans%2Csector&limit=-1&select=sector_code%2Csum_of_percent_of_trans_usd&groupby=sector_code&trans_code=D%7CE&trans_day_gteq=2014-01-01&trans_day_lt=2015-01-01&reporting_ref=",gb,"&view=publisher_sectors&_=1441789807497")
dat2014 <- fromJSON(url2014)[[1]]
dat2014$year <- 2014
dat2014$donor <- donorname
if(is.null(nrow(dat2014))){
dat2014 <- empty
}
url2015 <- paste0("http://www.d-portal.org/q?from=act%2Cbudget%2Csector&limit=-1&select=sector_code%2Csum_of_percent_of_budget_usd&budget_priority=1&groupby=sector_code&budget_day_end_gteq=2015-01-01&budget_day_end_lt=2016-01-01&reporting_ref=",gb,"&view=publisher_sectors&_=1441789807501")
dat2015 <- fromJSON(url2015)[[1]]
dat2015$year <- 2015
dat2015$donor <- donorname
names(dat2015)[2] <- "sum_of_percent_of_trans_usd"
if(is.null(nrow(dat2015))){
dat2015 <- empty
}
dat <- rbind(dat2013,dat2014,dat2015)
return(dat)
}
View(data)
unique(data$donor)
wd <- "C:/git/alexm-util/DevInit/R/GHA/presentation/tmp"
root <- "C:/git/alexm-util/DevInit/R/GHA/presentation/"
setwd(wd)
#Delete everything in tmp
unlink(dir(wd, full.names = TRUE),recursive=TRUE)
toRemove <- list.files(root,pattern="*.jpg|*.xml",full.names=TRUE)
for(i in 1:length(toRemove)){
fileToRemove <- toRemove[i]
file.remove(fileToRemove)
}
data <- read.csv('../donorBySector.csv')
countries <- unique(data$DONOR)
for(i in 1:length(countries)){
sub <- subset(data,DONOR==countries[i])
write.csv(sub,paste0(countries[i],'.csv'),row.names=FALSE)
}
filenames <- list.files(wd,pattern="*.csv",full.names=TRUE)
for(i in 1:length(filenames)){
bname <- tolower(basename(filenames[i]))
bname <- gsub(" ","_",bname)
file.rename(filenames[i],bname)
}
?unique
zipname <-'http://data.gdeltproject.org/events/20150831.export.CSV.zip'
zip <- tempfile()
download.file(zipname,zip)
unzip(zip)
for(i in 1:5){
yesterday <- format(Sys.Date()-i, "%Y%m%d")
yestwd <- paste(wd,yesterday,sep="/")
message(yesterday)
if(file.exists(yestwd)){
setwd(yestwd)
filename <- paste(yesterday,".export.CSV",sep="")
}
else{
dir.create(paste(wd,yesterday,sep="/"))
setwd(yestwd)
filename <- paste(yesterday,".export.CSV",sep="")
zipname <- paste("http://data.gdeltproject.org/events/",
filename,".zip",sep="")
zip <- tempfile()
download.file(zipname,zip)
unzip(zip, files = NULL, list = FALSE, overwrite = TRUE,
junkpaths = FALSE, exdir = ".", unzip = "internal",
setTimes = FALSE)
}
setwd(wd)
}
data <- read.csv("../crs2000.csv")
print(paste("This dataset is",ncol(data),"columns wide and",nrow(data),"rows long."))
#Transform - Let's find where commitments exceed disbursements
pdiff <- function(xVector,yVector){
diffs <- double(length(xVector))
for(i in 1:length(xVector)){
x <- xVector[i]
y <- yVector[i]
if(is.na(x)){
x <- 0
}
if(is.na(y)){
y <- 0
}
diff <- x-y
if(diff<0){diff<-0}
diffs[i] <- diff
}
return(diffs)
}
afg <- subset(data,recipientname=="Afghanistan")
View(afg)
afg <- transform(afg,undisbursed_defl=pdiff(usd_commitment_defl,usd_disbursement_defl))
View(afg)
library(plyr)
afg <- ddply(afg,.(donorname),summarize,undisbursed_total_defl=sum(undisbursed_defl,na.rm=TRUE))
View(afg)
afg <- afg[order(-afg$undisbursed_total_defl),]
afg <- transform(afg,donorname=reorder(donorname,-undisbursed_total_defl))
library(ggplot2)
d <- ggplot(afg,aes(x=factor(donorname),y=undisbursed_total_defl)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle=-90))
d
purposes <- c(72010,72040,72050,73010,74010)
hum <- subset(data,purposecode %in% purposes)
View(hum)
setwd(root)
system("python scrape_trends.py")
setwd(wd)
pdfData <- read.csv("global_trends.csv",check.names=FALSE,na.strings="-")
View(pdfData)
library(rsdmx)
OECD <- function(url,concept=FALSE){
#Separate out data URL components
dRoot <- "http://stats.oecd.org/restsdmx/sdmx.ashx/GetData/"
indicator <- strsplit(substr(url,nchar(dRoot)+1,nchar(url)),"/")[[1]][1]
filter <- substr(url,nchar(dRoot)+1+nchar(indicator),nchar(url))
#Structure URL
sRoot <- "http://stats.oecd.org/restsdmx/sdmx.ashx/GetDataStructure/"
t1sUrl <- paste(sRoot
,indicator
,sep = "")
#Fetch data
t1dsdmx <- readSDMX(url)
t1ssdmx <- readSDMX(t1sUrl)
#Convert to DF
t1 <- as.data.frame(t1dsdmx)
#get codelists
cls <- t1ssdmx@codelists
codelists <- sapply(cls@codelists, function(x) x@id)
#Recode
for(i in 1:length(codelists)){
suffix <- paste("CL_",indicator,"_",sep="")
clName <- substr(codelists[i],nchar(suffix)+1,nchar(codelists[i]))
codelist <- cls@codelists[i][[1]]@Code
for(j in 1:length(codelist)){
id <- codelist[j][[1]]@id
name <- codelist[j][[1]]@label$en
if(clName %in% colnames(t1)){
t1[clName][which(t1[clName]==id),] <- name
}
}
}
#get concepts
concepts <- as.data.frame(t1ssdmx@concepts)
if(concept){
return(concepts)
}else{
return(t1)
}
}
table1 <- OECD(url)
url <- "http://stats.oecd.org/restsdmx/sdmx.ashx/GetData/TABLE1/12.1.1010.1140.A/all?startTime=2005&endTime=2014"
table1 <- OECD(url)
View(table1)
library(WDI)
indicator <- "NY.GDP.MKTP.KD" #GDP CONSTANT 2005 USD
wbconstant <- WDI(country = "all",
indicator = indicator,
start = 2000,
end = 2015,
extra = TRUE
)
indicator <- "NY.GDP.MKTP.CD" #GDP CURRENT USD
wbcurrent <- WDI(country = "all",
indicator = indicator,
start = 2000,
end = 2015,
extra = TRUE
)
View(wbconstant)
library(jsonlite)
root <- "http://fts.unocha.org/api/v1/"
appeals <- fromJSON(paste0(root,"Appeal/year/2015.json"))
View(appeals)
projects <- fromJSON(paste(root,"Project/appeal/",appeals$id[1],".json",sep=""))
for(i in 2:nrow(appeals)){
projects <- rbind(projects, fromJSON(paste(root,"Project/appeal/",appeals$id[i],".json",sep="")))
print(paste("Pulling projects for appeal ==",appeals$id[i]))
}
contrib_appeal <- fromJSON(paste(root,"Contribution/appeal/",appeals$id[1],".json",sep=""))
for(i in 2:nrow(appeals)){
contrib_appeal <- rbind(contrib_appeal, fromJSON(paste(root,"Contribution/appeal/",appeals$id[i],".json",sep="")))
print(paste("Pulling contributions for appeal ==",appeals$id[i]))
}
View(projects)
library(rvest)
CERFyears <- c(2013:2014)
toUrl <- "http://www.unocha.org/cerf/our-donors/funding/pledges-and-contributions/"
if(exists("toCERF")){rm(toCERF)}
for(i in 1:length(CERFyears)){
year <- CERFyears[i]
#To
page <- html(paste0(toUrl,year))
toCERFtmp <- page %>%
html_node("table") %>%
html_table(fill=TRUE)
if("Donors" %in% names(toCERFtmp)){
toCERFtmp <- toCERFtmp[,c(2,3)]
toCERFtmp$obsTime <- year
toCERFtmp$RECIPIENT <- "Central Emergency Response Fund"
names(toCERFtmp) <- c("DONOR","obsValue","obsTime","RECIPIENT")
toCERFtmp$obsValue <- as.numeric(gsub(",","", toCERFtmp$obsValue))
toCERFtmp <- subset(toCERFtmp,!is.na(DONOR))
if(exists("toCERF")){toCERF <- rbind(toCERF,toCERFtmp)}else{toCERF <- toCERFtmp}
}
rm(page)
}
View(toCERF)
library(rvest)
CERFyears <- c(2012:2014)
toUrl <- "http://www.unocha.org/cerf/our-donors/funding/pledges-and-contributions/"
if(exists("toCERF")){rm(toCERF)}
for(i in 1:length(CERFyears)){
year <- CERFyears[i]
#To
page <- html(paste0(toUrl,year))
toCERFtmp <- page %>%
html_node("table") %>%
html_table(fill=TRUE)
if("Donors" %in% names(toCERFtmp)){
toCERFtmp <- toCERFtmp[,c(2,3)]
toCERFtmp$obsTime <- year
toCERFtmp$RECIPIENT <- "Central Emergency Response Fund"
names(toCERFtmp) <- c("DONOR","obsValue","obsTime","RECIPIENT")
toCERFtmp$obsValue <- as.numeric(gsub(",","", toCERFtmp$obsValue))
toCERFtmp <- subset(toCERFtmp,!is.na(DONOR))
if(exists("toCERF")){toCERF <- rbind(toCERF,toCERFtmp)}else{toCERF <- toCERFtmp}
}
rm(page)
}
View(toCERF)
startYear <- "1990"
endYear <- "2015"
if(as.integer(startYear)>=2006){cerfStart <- as.integer(startYear)}else{cerfStart <- 2006}
CERFyears <- c(cerfStart:as.integer(endYear))
fromUrl <- "https://cerf.unocha.org/admin/Webservices/SummaryFundingadv.aspx?type=country&year="
toUrl <- "http://www.unocha.org/cerf/our-donors/funding/pledges-and-contributions/"
if(exists("fromCERF")){rm(fromCERF)}
if(exists("toCERF")){rm(toCERF)}
for(i in 1:length(CERFyears)){
year <- CERFyears[i]
#From
page <- html(paste0(fromUrl,year))
fromCERFtmp <- page %>%
html_node("table") %>%
html_table(fill=TRUE)
fromCERFtmp <- fromCERFtmp[,c(2,3)]
fromCERFtmp$obsTime <- year
fromCERFtmp$DONOR <- "Central Emergency Response Fund"
names(fromCERFtmp) <- c("RECIPIENT","obsValue","obsTime","DONOR")
fromCERFtmp$obsValue <- as.numeric(gsub(",","", fromCERFtmp$obsValue))
fromCERFtmp <- subset(fromCERFtmp,!is.na(RECIPIENT))
fromCERFtmp <- subset(fromCERFtmp, !grepl("Country",RECIPIENT))
fromCERFtmp <- subset(fromCERFtmp, !grepl("Total",RECIPIENT))
fromCERFtmp <- subset(fromCERFtmp, !grepl(as.character(year),RECIPIENT))
if(exists("fromCERF")){fromCERF <- rbind(fromCERF,fromCERFtmp)}else{fromCERF <- fromCERFtmp}
rm(page)
}
rm(page)
}
View(fromCERF)
wbdeflator <- merge(wbcurrent
,wbconstant
,by=intersect(names(wbcurrent),names(wbconstant))
)
wbdeflator <- transform(wbdeflator,base2005=(NY.GDP.MKTP.KD/NY.GDP.MKTP.CD))
View(wbdeflator)
keep <- c("iso2c","iso3c","country","year","base2005")
wbdeflator <- wbdeflator[keep]
refyear <- 2013
wbdeflator <- ddply(wbdeflator,.(country),function(x){
x$baseref <- x$base2005 / subset(x,year==refyear)$base2005
return(x)
})
View(wbdeflator)
library(plyr)
library(plyr)
pivot <- ddply(data,.(donorname),summarize,total=sum(usd_disbursement_defl,na.rm=TRUE))
View(pivot)
#install.packages("ggplot2")
#install.packages("extrafont")
#install.packages("plyr")
library(ggplot2)
library(plyr)
library(extrafont)
#font_import()
loadfonts()
ghahex <- c(
"#fcd800" #Yellow
,"#67cdca" #Blue
,"#Ffa03c" #Orange
,"#61c994" #Green
,"#a169de" #Purple
,"#A6f2eb" #Light blue
,"#8eb8b4" #Grey blue
,"#ff8f19" #Orange
,"#b5a384" #Brown
,"#99e354" #Greem
)
wd <- "C:/git/alexm-util/DevInit/R/GHA/"
setwd(wd)
#First chart####
data <- read.csv("scaled_pies.csv")
# Calculate the percentages
data = ddply(data, .(country), transform, percent = usd/total)
# Format the labels and calculate their positions
data <- ddply(data, .(country), transform, pos = (cumsum(percent) - 0.5 * percent))
data$label <- paste0(sprintf("%.0f", data$percent*100), "%")
#data$label <- paste0("$",round(data$usd),"m")
p <- ggplot(data,aes(fill=sector,x=total/2,y=usd,width=total)) +
geom_bar(position="fill", stat="identity") +
geom_text(aes(y = pos, x = total+60, label = label), size = 4,family="Calibri") +
facet_grid(. ~ country) +
coord_polar(theta="y") +
theme_bw() +
theme(panel.grid=element_blank()) +
theme(axis.text=element_blank()) +
theme(axis.ticks=element_blank()) +
theme(axis.title=element_blank()) +
theme(legend.position="bottom") +
theme(strip.background = element_blank()) +
theme(panel.border = element_blank()) +
theme(legend.title = element_blank()) +
theme(strip.text = element_text(size=15)) +
theme(text = element_text(family="Calibri")) +
scale_fill_manual(values=ghahex)
#+ geom_text(x=1,y=1,aes(label=paste0("$",total,"m")),family="Calibri")
p
data2 <- read.csv("scaled_pies2.csv")
# Calculate the percentages
data2 = ddply(data2, .(country), transform, percent = usd/total)
# Format the labels and calculate their positions
data2 <- ddply(data2, .(country), transform, pos = (cumsum(percent) - 0.5 * percent))
#data$label <- paste0(sprintf("%.0f", data$percent*100), "%")
data2$label <- paste0("$",round(data2$usd),"m")
data2 <- subset(data2,percent>0)
data2$country <- factor(data2$country,levels=c("Kenya","Uganda","South Sudan","Somalia"))
p2 <- ggplot(data2,aes(fill=resource,x=total/2,y=usd,width=total)) +
geom_bar(position="fill", stat="identity") +
geom_text(aes(y = pos, x = total/2, label = label), size = 4,family="Calibri") +
facet_grid(. ~ country) +
#coord_polar(theta="y") +
theme_bw() +
theme(panel.grid=element_blank()) +
theme(axis.text=element_blank()) +
theme(axis.ticks=element_blank()) +
theme(axis.title=element_blank()) +
theme(legend.position="bottom") +
theme(strip.background = element_blank()) +
theme(panel.border = element_blank()) +
theme(legend.title = element_blank()) +
theme(strip.text = element_text(size=15)) +
theme(text = element_text(family="Calibri")) +
scale_fill_manual(values=ghahex)
#+ geom_text(x=1,y=1,aes(label=paste0("$",total,"m")),family="Calibri")
p2
###Function########################################################################################
###Thanks to Kyle Walker, http://rpubs.com/walkerke/wdi_leaflet
#install.packages('rgdal')
#install.packages('devtools')
#install.packages('plyr')
#library(devtools)
#devtools::install_github("rstudio/leaflet")
library(rgdal)
library(leaflet)
library(plyr)
windows <- TRUE
if(windows){pathpre<-"C:"}else{pathpre<-"~"}
### Function to create a Leaflet interactive map.
diRamp <- function(colorText1,colorText2=NA,colorText3=NA){
colorRef <- list("red"="#BA0C2F")
colorRef <- c(colorRef,"white"="#FFFFFF")
colorRef <- c(colorRef,"black"="#000000")
colorRef <- c(colorRef,"orange"="#EA7600")
colorRef <- c(colorRef,"purple"="#93328E")
colorRef <- c(colorRef,"blue"="#1B365D")
colorRef <- c(colorRef,"lightblue"="#0095CB")
colorRef <- c(colorRef,"yellow"="#B7BF10")
colorRef <- c(colorRef,"darkred"=rgb(96, 6, 24,1,maxColorValue=255))
colorRef <- c(colorRef,"pink"=rgb(251, 197, 208,1,maxColorValue=255))
colorRef <- c(colorRef,"blue4"=rgb(27, 54, 93,1,maxColorValue=255))
colorRef <- c(colorRef,"blue3"=rgb(73, 94, 125,1,maxColorValue=255))
colorRef <- c(colorRef,"blue2"=rgb(118, 134, 158,1,maxColorValue=255))
colorRef <- c(colorRef,"blue1"=rgb(164, 175, 190,1,maxColorValue=255))
colorRef <- c(colorRef,"blue0"=rgb(209, 215, 223,1,maxColorValue=255))
if(!is.na(colorText2)){
if(!is.na(colorText3)){
color1 <- colorRef[[colorText1]]
if(is.null(color1)){color1 <- colorText1}
color2 <- colorRef[[colorText2]]
if(is.null(color2)){color2 <- colorText2}
color3 <- colorRef[[colorText3]]
if(is.null(color3)){color3 <- colorText3}
colorRamp(c(color1,color2,color3), interpolate="linear")
}else{
color1 <- colorRef[[colorText1]]
if(is.null(color1)){color1 <- colorText1}
color2 <- colorRef[[colorText2]]
if(is.null(color2)){color2 <- colorText2}
colorRamp(c(color1,color2), interpolate="linear")
}
}else{
color1 <- colorRef[["white"]]
color2 <- colorRef[[colorText1]]
if(is.null(color2)){color2 <- colorText2}
colorRamp(c(color1,color2), interpolate="linear")
}
}
ug_leaflet <- function(series,indicator, year = NA, value = "value", classes = 5, colors = "Blues") {
districts <- readOGR(dsn = paste0(pathpre,"/git/digital-platform/shape-files/uganda/uganda.shp"),
layer = "uganda",
encoding = "UTF-8",
verbose = FALSE)
datPath <- paste(paste0(pathpre,"/git/digital-platform/"),series,"/",indicator,".csv",sep="")
dat <- read.csv(datPath, header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE,row.names=NULL)
if(!is.na(year)){
dat <- dat[which(dat$year==year),]
}
keep <- c("id","year",indicator)
names(dat)[names(dat) == value] <- indicator
dat <- dat[keep]
districts2 <- merge(districts,
dat,
by = c("id"),
sort = FALSE)
districts2$district <- districts2$name
if(is.numeric(classes)){
if(length(classes)==1){
pal <- colorQuantile(colors, NULL, n = classes)
}else{
levels <- classes[order(classes)]
indDat <- dat[[indicator]]
indDat <- indDat[which(!is.na(indDat))]
indMin <- min(indDat)
indMax <- max(indDat)
if(levels[1]>indMin){
levels <- c(indMin,levels)
}
if(levels[length(levels)]<indMax){
levels <- c(levels,indMax)
}
pal <- colorBin(colors, c(indMin,indMax) , bins = levels)
}
}else{
conceptPath <- paste0(pathpre,"/git/digital-platform/concepts.csv")
concepts <- read.csv(conceptPath, header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
range <- concepts[which(concepts$id==indicator&concepts$series=="country-year"),]$range
if(!is.na(range)){
classes <- as.numeric(strsplit(range,",")[[1]])
levels <- classes[order(classes)]
indDat <- dat[[indicator]]
indDat <- indDat[which(!is.na(indDat))]
indMin <- min(indDat)
indMax <- max(indDat)
if(levels[1]>indMin){
levels <- c(indMin,levels)
}
if(levels[length(levels)]<indMax){
levels <- c(levels,indMax)
}
pal <- colorBin(colors, c(indMin,indMax) , bins = levels)
}else{
warning("Error reading range from concepts.csv. Choosing 5 chucks instead.")
pal <- colorQuantile(colors, NULL, n = 5)
}
}
popup <- paste0("<strong>District: </strong>",
districts2$district,
"<br><strong>",
indicator,
", ",
as.character(districts2$year),
": </strong>",
districts2[[indicator]])
stamen_tiles <- "http://{s}.tile.stamen.com/toner-lite/{z}/{x}/{y}.png"
stamen_attribution <- 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a href="http://openstreetmap.org">OpenStreetMap</a>, under <a href="http://www.openstreetmap.org/copyright">ODbL</a>.'
val<-districts2[[indicator]]
color<- pal(districts2[[indicator]])
legend <- data.frame(val,color,stringsAsFactors=FALSE)
legend <- ddply(legend,.(color),summarize,from=min(val),to=max(val),count=length(val),stringsAsFactors=FALSE)
legend <- legend[order(legend$from),]
legend$from.to <- paste(as.character(legend$from),as.character(legend$to),sep=" - ")
legend<- legend[c("color","from.to","count")]
for(i in 1:length(legend$from.to)){
if(legend$from.to[i]=="NA - NA"){
legend$from.to[i]="NA"
}
}
bp <- barplot(legend$count,
legend.text=legend$from.to,
beside=FALSE,
col=legend$color,
main = indicator)
text(bp, 0, round(legend$count, 1),cex=1,pos=3)
leaflet(data = districts2) %>%
#addTiles(urlTemplate = stamen_tiles,
#         attribution = stamen_attribution) %>%
setView(32, 1, zoom = 6) %>%
addPolygons(fillColor = ~pal(districts2[[indicator]]),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup)
}
##Syntax is:
#ug_leaflet(series,indicator,year,value,classes,colorRamp)
#Map appears in viewer, legend appears in plots along with count of data in those bins
#DPR
ug_leaflet("country-year","uganda-poverty-headcount",NA,"value",c(30,50,70,90),diRamp("pink","red","darkred"))
install.packages("WDI")
install.packages("WDI")
