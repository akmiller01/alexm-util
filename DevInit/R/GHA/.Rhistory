data <- data[,-which(names(data) %in% c("entity-name"))]
if("id" %in% names){
data <- merge(
udistricts
,data
,by=c("id")
,all.y=TRUE
)
}
}
#Special Kenya-data case
if(substr(basename,1,6)=="kenya-"){
data <- data[,-which(names(data) %in% c("entity-name"))]
if("id" %in% names){
data <- merge(
kdistricts
,data
,by=c("id")
,all.y=TRUE
)
}
}
#Try and sort by entity name, failing that: id, failing that: year, failing that, the first column.
names <- colnames(data)
if("entity-name" %in% names){
if("year" %in% names){
data <- data[order(data["entity-name"],data$year),]
}else{
data <- data[order(data["entity-name"]),]
}
}
else if("entity-to-name" %in% names){
if("year" %in% names){
data <- data[order(data["entity-to-name"],data$year),]
}else{
data <- data[order(data["entity-to-name"]),]
}
}
else if("entity-from-name" %in% names){
if("year" %in% names){
data <- data[order(data["entity-from-name"],data$year),]
}else{
data <- data[order(data["entity-from-name"]),]
}
}
else if("id" %in% names){
if("year" %in% names){
data <- data[order(data["id"],data$year),]
}else{
data <- data[order(data["id"]),]
}
}
else{
if("year" %in% names){
data <- data[data$year,]
}else{
data <- data[order(data[,1]),]
}
}
#Create a folder for each indicator with sub-csv dir
dir.create(fwd)
setwd(fwd)
cwd = paste(fwd,"csv",sep="/")
dir.create(cwd)
#Create workbook
wb <- createWorkbook(basename)
#Start notes sheet/csv
concept = concepts[which(concepts$id==basename),]
notesList <- c(
paste("Name:",basename)
,paste("Description:",concept$description)
,paste("Units of measure:",concept$uom)
,paste("Source:",concept[,"source"])
,if(!is.na(concept[,"source-link"])) c(paste("Source-link:",concept[,"source-link"]),"") else ""
,"Notes:"
,if(!is.na(concept[,"calculation"])) c("",concept[,"calculation"],"") else ""
)
interpolated <- concept$interpolated[1]
if(!is.na(interpolated)){
notesList<-c(
notesList
,"This data contains interpolated values. The interpolated values are typically contained in a column called 'value,' while the uninterpolated values are stored in 'original-value.'"
,""
)
}
if("estimate" %in% names){
notesList<-c(
notesList
,"This data contains information that may be a projection. Projected datapoints are indicated by a value of TRUE in the 'estimate' column. The year at which projections begin varies from country to country."
,""
)
}
if("value-ncu" %in% names){
notesList<-c(
notesList
,"This data contains information that has been converted from current native currency units (NCU) to constant US Dollars. The NCU values are contained in the 'value-ncu' column, while the converted and deflated values are contained in the 'value' column."
,""
)
}
addWorksheet(wb,"Notes")
#Copy the data
write.csv(data,paste0(cwd,"/",basename,".csv"),row.names=FALSE,na="")
addWorksheet(wb,"Data")
writeData(wb,sheet="Data",data,colNames=TRUE,rowNames=FALSE)
#If we have an ID, a year to widen it by and it's simple, provide wide
if("id" %in% names & "year" %in% names & "value" %in% names & concept$type=="simple")  {
if("entity-name" %in% names){
wdata <- reshape(data[c("id","entity-name","year","value")],idvar=c("id","entity-name"),timevar="year",direction="wide")
}else{
wdata <- reshape(data[c("id","year","value")],idvar=c("id"),timevar="year",direction="wide")
}
wnames <- names(wdata)
for(j in 1:length(wnames)){
wname = wnames[j]
if(substr(wname,1,5)=="value"){
names(wdata)[names(wdata) == wname] <- substr(wname,7,nchar(wname))
}
}
notesList<-c(
notesList
,"On the 'Data-wide-value' sheet, we have provided the indicator in a wide format. The values you see listed there are from the 'value' column."
,""
)
addWorksheet(wb,"Data-wide-value")
writeData(wb,sheet="Data-wide-value",wdata,colNames=TRUE,rowNames=FALSE)
write.csv(wdata,paste(cwd,"/",basename,"-wide-value",".csv",sep=""),row.names=FALSE,na="")
}
#Wide for original-value
if("id" %in% names & "year" %in% names & "original-value" %in% names & concept$type=="simple")  {
if("entity-name" %in% names){
wdata <- reshape(data[c("id","entity-name","year","original-value")],idvar=c("id","entity-name"),timevar="year",direction="wide")
}else{
wdata <- reshape(data[c("id","year","original-value")],idvar=c("id"),timevar="year",direction="wide")
}
wnames <- names(wdata)
for(j in 1:length(wnames)){
wname = wnames[j]
if(substr(wname,1,14)=="original-value"){
names(wdata)[names(wdata) == wname] <- substr(wname,16,nchar(wname))
}
}
notesList<-c(
notesList
,"On the 'Data-wide-original-value' sheet, we have provided the indicator in a wide format. The values you see listed there are from the 'original-value' column."
,""
)
addWorksheet(wb,"Data-wide-original-value")
writeData(wb,sheet="Data-wide-original-value",wdata,colNames=TRUE,rowNames=FALSE)
write.csv(wdata,paste(cwd,"/",basename,"-wide-original-value",".csv",sep=""),row.names=FALSE,na="")
}
#Reference
#Copy entity.csv
file.copy(paste(refPath,"entity.csv",sep=""),paste(cwd,"entity.csv",sep="/"))
if(basename %in% names(refMap)){
refNames = strsplit(refMap[[basename]],",")[[1]]
notesList<-c(
notesList
,"The following tabs have been included for reference purposes:"
,paste(refNames,collapse=", ")
,""
)
for(j in 1:length(refNames)){
refBaseName = refNames[j]
refName = paste(refPath,refBaseName,".csv",sep="")
#Copy the reference files
file.copy(refName,paste(cwd,"/",refBaseName,".csv",sep=""))
refData <- read.csv(refName,as.is=TRUE,na.strings="")
addWorksheet(wb,refBaseName)
writeData(wb,sheet=refBaseName,refData,colNames=TRUE,rowNames=FALSE)
}
}
#Cap off notes sheet
notesList<-c(
notesList
,""
,""
,"The following is data downloaded from Development Initiative's Datahub: http://devinit.org/data"
,"It is licensed under a Creative Commons Attribution 4.0 International license."
,"More information on licensing is available here: https://creativecommons.org/licenses/by/4.0/"
,"For concerns, questions, or corrections: please email info@devinit.org"
,"Copyright Development Initiatives Poverty Research Ltd. 2015"
)
notesDf <- data.frame(notesList)
writeData(wb,sheet="Notes",notesDf,colNames=FALSE,rowNames=FALSE)
write.table(notesDf,paste0(cwd,"/",basename,"-notes",".csv"),col.names=FALSE,row.names=FALSE,na="",sep=",")
saveWorkbook(wb, paste0(basename,".xlsx"), overwrite = TRUE)
#Go back to user-data folder
setwd(wd)
}
#Zip em up
filenames <- list.files(wd, pattern="/*", full.names=FALSE)
for(i in 1:length(filenames)){
files <- dir(filenames[i],full.names=TRUE)
zip(zipfile = filenames[i],files=files)
}
library(openxlsx)
?read.xlsx
setwd("S:/Central Services/IT/Secure Files")
data <- read.xlsx("pwprotecteddetails.xlsx")
xlsxFile <- system.file("pwprotecteddetails.xlsx", package = "openxlsx")
df1 <- read.xlsx(xlsxFile = xlsxFile, sheet = 1, skipEmptyRows = FALSE)
ls()
xlsxFile <- system.file("pwprotecteddetails.xlsx", package = "openxlsx")
library(openxlsx)
setwd("C:/Users/alexm/Documents/Rwork")
library(openxlsx)
setwd("C:/Users/alexm/Documents/Rwork")
xlsxFile <- system.file("pwprotecteddetails.xlsx", package = "openxlsx")
df1 <- read.xlsx(xlsxFile = xlsxFile, sheet = 1, skipEmptyRows = FALSE)
df1 <- read.xlsx("pwprotecteddetails.xlsx", sheet = 1, skipEmptyRows = FALSE)
#install.packages("rsdmx")
#install.packages("plyr")
#install.packages("dplyr")
#install.packages("httpuv")
#install.packages("googlesheets")
#install.packages("rvest")
library(rsdmx)
library(plyr)
suppressPackageStartupMessages(library("dplyr"))
library(httpuv)
library(googlesheets)
library(rvest)
#Configuration
setwd("C:/git/alexm-util/DevInit/R/GHA/Country_Profiles")
startYear <- "1990"
endYear <- "2015"
shares <- list(
WFP = 0.913364375831843
,UNICEF = 0.246929100907661
,UNHCR = 1
,UNRWA = 1
)
#OECD Func####
OECD <- function(url,concept=FALSE){
#Separate out data URL components
dRoot <- "http://stats.oecd.org/restsdmx/sdmx.ashx/GetData/"
indicator <- strsplit(substr(url,nchar(dRoot)+1,nchar(url)),"/")[[1]][1]
filter <- substr(url,nchar(dRoot)+1+nchar(indicator),nchar(url))
#Structure URL
sRoot <- "http://stats.oecd.org/restsdmx/sdmx.ashx/GetDataStructure/"
t1sUrl <- paste(sRoot
,indicator
,sep = "")
#Fetch data
t1dsdmx <- readSDMX(url)
t1ssdmx <- readSDMX(t1sUrl)
#Convert to DF
t1 <- as.data.frame(t1dsdmx)
#get codelists
cls <- t1ssdmx@codelists
codelists <- sapply(cls@codelists, function(x) x@id)
#Recode
for(i in 1:length(codelists)){
suffix <- paste("CL_",indicator,"_",sep="")
clName <- substr(codelists[i],nchar(suffix)+1,nchar(codelists[i]))
codelist <- cls@codelists[i][[1]]@Code
for(j in 1:length(codelist)){
id <- codelist[j][[1]]@id
name <- codelist[j][[1]]@label$en
if(clName %in% colnames(t1)){
t1[clName][which(t1[clName]==id),] <- name
}
}
}
#get concepts
concepts <- as.data.frame(t1ssdmx@concepts)
if(concept){
return(concepts)
}else{
return(t1)
}
}
#Download tables####
message("Downloading tables")
#Donor Bilateral HA###
haUrl <- paste0("http://stats.oecd.org/restsdmx/sdmx.ashx/GetData/TABLE2A/10200+10100+10010+71+86+64+62+30+66+35+57+45+93+65+63+61+88+55+85+89+10001+10002+130+142+133+136+139+189+10003+225+236+227+287+228+230+229+231+232+233+234+247+235+274+237+245+271+238+239+240+241+243+244+248+249+251+252+253+255+256+257+258+259+275+260+261+266+276+268+269+270+272+273+218+279+278+280+282+283+285+288+265+289+298+10004+10005+376+377+373+328+329+352+331+388+386+336+338+378+340+342+381+347+349+351+354+358+385+361+364+366+382+383+384+375+387+380+389+10006+425+428+431+434+437+440+443+446+451+454+457+460+463+489+498+10007+10008+725+728+730+732+740+735+738+742+745+748+751+752+753+755+761+764+765+769+789+10009+625+610+611+666+630+612+645+650+613+614+655+635+660+665+640+615+616+617+619+679+689+10011+530+540+543+546+549+552+555+558+561+566+573+576+550+580+589+798+10012+831+832+840+836+859+860+845+850+856+858+861+862+880+866+868+870+872+854+876+889+9998+10016+225+236+287+228+231+232+233+235+274+245+271+238+240+243+244+249+251+252+253+255+256+259+260+266+268+269+272+273+279+278+282+283+285+288+349+728+745+765+625+666+630+635+660+580+836+880+866+872+854+10017+248+279+265+740+614+615+10018+57+93+85+142+136+230+229+234+247+241+261+280+352+342+347+351+364+428+446+451+738+753+755+769+610+612+645+614+665+640+616+617+543+573+550+832+859+860+862+880+868+870+10019+71+86+64+66+65+63+55+130+133+139+227+239+257+275+276+270+218+376+377+352+336+338+378+340+381+354+358+385+366+382+383+384+425+431+434+437+440+454+457+460+463+730+751+764+611+613+655+616+540+543+549+555+831+832+859+845+856+861+870+876+10025+62+30+35+45+61+258+376+373+328+329+331+388+386+361+382+375+387+443+725+732+735+742+748+761+530+546+552+558+561+566+576+840+850+858+105+10024+88+89+189+237+289+298+380+389+489+498+752+789+650+619+679+689+589+798+889+9998+10030+236+287+228+229+231+232+233+234+247+235+271+238+240+241+243+244+251+252+253+255+256+259+260+266+268+269+272+273+278+282+283+285+288+349+351+364+428+446+625+614+10201+66+93+227+287+228+231+232+238+249+253+255+260+266+279+280+285+288+265+428+451+745+753+625+610+611+630+613+614+660+615+616+617+10202+230+233+244+257+268+270+376+377+328+329+352+338+378+340+381+349+354+385+382+383+384+375+446+457+761+765+655+831+832+836+859+860+845+856+861+862+880+866+870+872+854+10203+64+57+142+133+225+287+228+229+231+232+233+234+247+235+271+238+243+244+248+251+252+253+255+256+260+261+266+272+273+279+278+283+285+265+349+740+765+625+666+635+660+665+640+543+573+550+580+836+859+860+866+872+10150+913+914+916+915+910+906+917+918+919+901+905+904+909+912+988+903+907+902+927+989+816+975+900+959+974+967+963+964+966+10013+71+72+68+82+75+83+84+76+77+69+101+10014+86+93+85+610+611+612+613+614+615+616+617+87+102+10023+71+86+93+85+610+611+612+613+614+615+616+617+72+68+82+75+83+84+76+77+69+101+87+102+79+10040+225+236+227+287+228+230+229+231+232+233+234+247+235+274+245+271+238+239+240+241+243+244+248+249+251+252+253+255+256+257+259+275+260+261+266+268+269+270+272+273+278+280+282+283+285+288+265+377+328+329+352+378+340+381+349+354+382+383+384+375+446+457+832+836+862+880+866+870+872+854+10041+287+230+232+240+244+255+256+260+269+10152+996+990+878+98+1106+10026+10027.20005+20001+801+1+2+301+68+3+18+4+5+40+20+21+6+701+742+22+7+820+8+76+9+69+61+50+10+11+12+302+20002+1012+913+914+921+916+953+906+1011+1013+990+918+1311+811+1313+1312+944+901+905+912+988+903+958+976+812+104+951+978+971+959+948+974+967+963+923+964+960+966+928+20018+20006+72+62+30+82+75+546+552+83+70+84+45+77+87+566+732+764+55+576+20007+21600+1601+20003+301+4+5+6+701+12+302+20011+1+2+68+3+18+4+5+40+21+6+22+7+76+9+69+61+50+10+12+20004+1+2+68+3+18+4+5+40+21+6+22+7+76+9+69+61+50+10+12+918.1.216.D/all?startTime=",startYear,"&endTime=",endYear)
ha <- OECD(haUrl)
#UN agencies as a donor###
unUrl <- paste0("http://stats.oecd.org/restsdmx/sdmx.ashx/GetData/TABLE2A/10200+10100+10010+71+86+64+62+30+66+35+57+45+93+65+63+61+88+55+85+89+10001+10002+130+142+133+136+139+189+10003+225+236+227+287+228+230+229+231+232+233+234+247+235+274+237+245+271+238+239+240+241+243+244+248+249+251+252+253+255+256+257+258+259+275+260+261+266+276+268+269+270+272+273+218+279+278+280+282+283+285+288+265+289+298+10004+10005+376+377+373+328+329+352+331+388+386+336+338+378+340+342+381+347+349+351+354+358+385+361+364+366+382+383+384+375+387+380+389+10006+425+428+431+434+437+440+443+446+451+454+457+460+463+489+498+10007+10008+725+728+730+732+740+735+738+742+745+748+751+752+753+755+761+764+765+769+789+10009+625+610+611+666+630+612+645+650+613+614+655+635+660+665+640+615+616+617+619+679+689+10011+530+540+543+546+549+552+555+558+561+566+573+576+550+580+589+798+10012+831+832+840+836+859+860+845+850+856+858+861+862+880+866+868+870+872+854+876+889+9998+10016+225+236+287+228+231+232+233+235+274+245+271+238+240+243+244+249+251+252+253+255+256+259+260+266+268+269+272+273+279+278+282+283+285+288+349+728+745+765+625+666+630+635+660+580+836+880+866+872+854+10017+248+279+265+740+614+615+10018+57+93+85+142+136+230+229+234+247+241+261+280+352+342+347+351+364+428+446+451+738+753+755+769+610+612+645+614+665+640+616+617+543+573+550+832+859+860+862+880+868+870+10019+71+86+64+66+65+63+55+130+133+139+227+239+257+275+276+270+218+376+377+352+336+338+378+340+381+354+358+385+366+382+383+384+425+431+434+437+440+454+457+460+463+730+751+764+611+613+655+616+540+543+549+555+831+832+859+845+856+861+870+876+10025+62+30+35+45+61+258+376+373+328+329+331+388+386+361+382+375+387+443+725+732+735+742+748+761+530+546+552+558+561+566+576+840+850+858+105+10024+88+89+189+237+289+298+380+389+489+498+752+789+650+619+679+689+589+798+889+9998+10030+236+287+228+229+231+232+233+234+247+235+271+238+240+241+243+244+251+252+253+255+256+259+260+266+268+269+272+273+278+282+283+285+288+349+351+364+428+446+625+614+10201+66+93+227+287+228+231+232+238+249+253+255+260+266+279+280+285+288+265+428+451+745+753+625+610+611+630+613+614+660+615+616+617+10202+230+233+244+257+268+270+376+377+328+329+352+338+378+340+381+349+354+385+382+383+384+375+446+457+761+765+655+831+832+836+859+860+845+856+861+862+880+866+870+872+854+10203+64+57+142+133+225+287+228+229+231+232+233+234+247+235+271+238+243+244+248+251+252+253+255+256+260+261+266+272+273+279+278+283+285+265+349+740+765+625+666+635+660+665+640+543+573+550+580+836+859+860+866+872+10150+913+914+916+915+910+906+917+918+919+901+905+904+909+912+988+903+907+902+927+989+816+975+900+959+974+967+963+964+966+10013+71+72+68+82+75+83+84+76+77+69+101+10014+86+93+85+610+611+612+613+614+615+616+617+87+102+10023+71+86+93+85+610+611+612+613+614+615+616+617+72+68+82+75+83+84+76+77+69+101+87+102+79+10040+225+236+227+287+228+230+229+231+232+233+234+247+235+274+245+271+238+239+240+241+243+244+248+249+251+252+253+255+256+257+259+275+260+261+266+268+269+270+272+273+278+280+282+283+285+288+265+377+328+329+352+378+340+381+349+354+382+383+384+375+446+457+832+836+862+880+866+870+872+854+10041+287+230+232+240+244+255+256+260+269+10152+996+990+878+98+1106+10026+10027.967+963+964+966.1.206.D/all?startTime=",startYear,"&endTime=",endYear)
un <- OECD(unUrl)
un <- subset(un, !grepl(", Total",RECIPIENT))
#Donor contributions to UN agencies###
tounUrl <- paste0("http://stats.oecd.org/restsdmx/sdmx.ashx/GetData/TABLE2A/967+963+964+966.20005+20001+801+1+2+301+68+3+18+4+5+40+20+21+6+701+742+22+7+820+8+76+9+69+61+50+10+11+12+302+20002+1012+913+914+921+916+953+906+1011+1013+990+918+1311+811+1313+1312+944+901+905+912+988+903+958+976+812+104+951+978+971+959+948+974+967+963+923+964+960+966+928+20018+20006+72+62+30+82+75+546+552+83+70+84+45+77+87+566+732+764+55+576+20007+21600+1601+20003+301+4+5+6+701+12+302+20011+1+2+68+3+18+4+5+40+21+6+22+7+76+9+69+61+50+10+12+20004+1+2+68+3+18+4+5+40+21+6+22+7+76+9+69+61+50+10+12+918.1.206.D/all?startTime=",startYear,"&endTime=",endYear)
toun <- OECD(tounUrl)
toun <- subset(toun, !grepl(", Total",DONOR))
#Donor EU contributions###
# toeuUrl <- paste0("http://stats.oecd.org/restsdmx/sdmx.ashx/GetData/TABLE1/20005+20001+801+1+2+301+68+3+18+4+5+40+20+21+6+701+742+22+7+820+8+76+9+69+61+50+10+11+12+302+20002+918+20006+72+62+30+82+75+546+552+83+70+84+45+77+87+566+732+764+55+576+20007+20003+301+4+5+6+701+12+302+20011+1+2+68+3+18+4+5+40+21+6+22+7+76+9+69+61+50+10+12+20004+1+2+68+3+18+4+5+40+21+6+22+7+76+9+69+61+50+10+12+918.1.2102.1140.D/all?startTime=",startYear,"&endTime=",endYear)
# toeu <- OECD(toeuUrl)
# toeu <- subset(toeu, !grepl(", Total",DONOR))
toeu <- read.csv("toEUmanual.csv",as.is=TRUE,na.strings="")
#Note, fromeu is contained within ha since I didn't restrict it.
fromeuUrl <- paste0("http://stats.oecd.org/restsdmx/sdmx.ashx/GetData/TABLE2A/10200+10100+10010+71+86+64+62+30+66+35+57+45+93+65+63+61+88+55+85+89+10001+10002+130+142+133+136+139+189+10003+225+236+227+287+228+230+229+231+232+233+234+247+235+274+237+245+271+238+239+240+241+243+244+248+249+251+252+253+255+256+257+258+259+275+260+261+266+276+268+269+270+272+273+218+279+278+280+282+283+285+288+265+289+298+10004+10005+376+377+373+328+329+352+331+388+386+336+338+378+340+342+381+347+349+351+354+358+385+361+364+366+382+383+384+375+387+380+389+10006+425+428+431+434+437+440+443+446+451+454+457+460+463+489+498+10007+10008+725+728+730+732+740+735+738+742+745+748+751+752+753+755+761+764+765+769+789+10009+625+610+611+666+630+612+645+650+613+614+655+635+660+665+640+615+616+617+619+679+689+10011+530+540+543+546+549+552+555+558+561+566+573+576+550+580+589+798+10012+831+832+840+836+859+860+845+850+856+858+861+862+880+866+868+870+872+854+876+889+9998+10016+225+236+287+228+231+232+233+235+274+245+271+238+240+243+244+249+251+252+253+255+256+259+260+266+268+269+272+273+279+278+282+283+285+288+349+728+745+765+625+666+630+635+660+580+836+880+866+872+854+10017+248+279+265+740+614+615+10018+57+93+85+142+136+230+229+234+247+241+261+280+352+342+347+351+364+428+446+451+738+753+755+769+610+612+645+614+665+640+616+617+543+573+550+832+859+860+862+880+868+870+10019+71+86+64+66+65+63+55+130+133+139+227+239+257+275+276+270+218+376+377+352+336+338+378+340+381+354+358+385+366+382+383+384+425+431+434+437+440+454+457+460+463+730+751+764+611+613+655+616+540+543+549+555+831+832+859+845+856+861+870+876+10025+62+30+35+45+61+258+376+373+328+329+331+388+386+361+382+375+387+443+725+732+735+742+748+761+530+546+552+558+561+566+576+840+850+858+105+10024+88+89+189+237+289+298+380+389+489+498+752+789+650+619+679+689+589+798+889+9998+10030+236+287+228+229+231+232+233+234+247+235+271+238+240+241+243+244+251+252+253+255+256+259+260+266+268+269+272+273+278+282+283+285+288+349+351+364+428+446+625+614+10201+66+93+227+287+228+231+232+238+249+253+255+260+266+279+280+285+288+265+428+451+745+753+625+610+611+630+613+614+660+615+616+617+10202+230+233+244+257+268+270+376+377+328+329+352+338+378+340+381+349+354+385+382+383+384+375+446+457+761+765+655+831+832+836+859+860+845+856+861+862+880+866+870+872+854+10203+64+57+142+133+225+287+228+229+231+232+233+234+247+235+271+238+243+244+248+251+252+253+255+256+260+261+266+272+273+279+278+283+285+265+349+740+765+625+666+635+660+665+640+543+573+550+580+836+859+860+866+872+10150+913+914+916+915+910+906+917+918+919+901+905+904+909+912+988+903+907+902+927+989+816+975+900+959+974+967+963+964+966+10013+71+72+68+82+75+83+84+76+77+69+101+10014+86+93+85+610+611+612+613+614+615+616+617+87+102+10023+71+86+93+85+610+611+612+613+614+615+616+617+72+68+82+75+83+84+76+77+69+101+87+102+79+10040+225+236+227+287+228+230+229+231+232+233+234+247+235+274+245+271+238+239+240+241+243+244+248+249+251+252+253+255+256+257+259+275+260+261+266+268+269+270+272+273+278+280+282+283+285+288+265+377+328+329+352+378+340+381+349+354+382+383+384+375+446+457+832+836+862+880+866+870+872+854+10041+287+230+232+240+244+255+256+260+269+10152+996+990+878+98+1106+10026+10027.918.1.216.D/all?startTime=",startYear,"&endTime=",endYear)
fromeu <- OECD(fromeuUrl)
fromeu <- subset(fromeu, !grepl(", Total",RECIPIENT))
View(un)
View(toun)
unique(toun$RECIPIENT)
names(un)
names(toun)
names(un) <- paste("from",names(un),sep=".")
names(toun) <- paste("to",names(toun),sep=".")
names(un)
names(toun)
toFromUN <- merge(
toun
,un
,by.x=c("to.RECIPIENT","to.obsTime")
,by.y=c("from.DONOR","from.obsTime")
)
View(toFromUN)
names(toFromUN)[which(names(toFromUN)=="to.DONOR")] <- "DONOR"
names(toFromUN)[which(names(toFromUN)=="to.RECIPIENT")] <- "AGENCY"
names(toFromUN)[which(names(toFromUN)=="to.obsTime")] <- "obsTime"
names(toFromUN)[which(names(toFromUN)=="from.RECIPIENT")] <- "RECIPIENT"
shares <- list(
WFP = 0.913362149906299
,UNICEF = 0.24693937563206
,UNHCR = 1
,UNRWA = 1
)
shares
shares[["WFP"]]
c(1,2,3,4)
c(1,2,3,4)[3]
shares
shares["WFP"]
typeof(shares["WFP"])
typeof(shares[["WFP"]])
shares
shares[1]
shares[[1]]
toFromUN <- transform(toFromUN,share=sapply(AGENCY,function(x){return(shares[[x]])}))
View(toFromUN)
unique(toFromUN$share)
sum(1,2,3)
sum(1,2,3,NA)
sum(1,2,3,NA,na.rm=TRUE)
totalUN <- ddply(toun,.(to.RECIPIENT,to.obsTime),summarize,obsValue=sum(to.obsValue,na.rm=TRUE))
View(totalUN)
names(totalUN) <- c("AGENCY","obsTime","totalToUN")
toFromUN <- merge(
toFromUN
,totalUN
,by=c("AGENCY","obsTime")
)
View(toFromUN)
toFromUN <- transform(toFromUN,toUNpercent=to.obsValue/totalToUN)
View(toFromUN)
unFunding <- transform(toFromUN,obsValue=toUNpercent*from.obsValue*share)
keep <- c("DONOR","RECIPIENT","AGENCY","obsTime","obsValue")
unFunding <- unFunding[keep]
View(unFunding)
#Donor spending via EU####
message("Donor spending via EU")
names(fromeu) <- paste("from",names(fromeu),sep=".")
names(toeu) <- paste("to",names(toeu),sep=".")
toFromEU <- merge(
toeu
,fromeu
,by.x=c("to.RECIPIENT","to.obsTime")
,by.y=c("from.DONOR","from.obsTime")
)
names(toFromEU)[which(names(toFromEU)=="to.DONOR")] <- "DONOR"
names(toFromEU)[which(names(toFromEU)=="to.RECIPIENT")] <- "AGENCY"
names(toFromEU)[which(names(toFromEU)=="to.obsTime")] <- "obsTime"
names(toFromEU)[which(names(toFromEU)=="from.RECIPIENT")] <- "RECIPIENT"
totalEU <- ddply(toeu,.(to.RECIPIENT,to.obsTime),summarize,obsValue=sum(to.obsValue,na.rm=TRUE))
names(totalEU) <- c("AGENCY","obsTime","totalToEU")
toFromEU <- merge(
toFromEU
,totalEU
,by=c("AGENCY","obsTime")
)
toFromEU <- transform(toFromEU,toEUpercent=to.obsValue/totalToEU)
euFunding <- transform(toFromEU,obsValue=toEUpercent*from.obsValue)
keep <- c("DONOR","RECIPIENT","obsTime","obsValue")
euFunding <- euFunding[keep]
View(euFunding)
#Donor spending via the CERF webscrape###
if(as.integer(startYear)>=2006){cerfStart <- as.integer(startYear)}else{cerfStart <- 2006}
CERFyears <- c(cerfStart:as.integer(endYear))
fromUrl <- "https://cerf.unocha.org/admin/Webservices/SummaryFundingadv.aspx?type=country&year="
toUrl <- "http://www.unocha.org/cerf/our-donors/funding/pledges-and-contributions/"
if(exists("fromCERF")){rm(fromCERF)}
if(exists("toCERF")){rm(toCERF)}
for(i in 1:length(CERFyears)){
year <- CERFyears[i]
#From
page <- html(paste0(fromUrl,year))
fromCERFtmp <- page %>%
html_node("table") %>%
html_table(fill=TRUE)
fromCERFtmp <- fromCERFtmp[,c(2,3)]
fromCERFtmp$obsTime <- year
fromCERFtmp$DONOR <- "Central Emergency Response Fund"
names(fromCERFtmp) <- c("RECIPIENT","obsValue","obsTime","DONOR")
fromCERFtmp$obsValue <- as.numeric(gsub(",","", fromCERFtmp$obsValue))
fromCERFtmp <- subset(fromCERFtmp,!is.na(RECIPIENT))
fromCERFtmp <- subset(fromCERFtmp, !grepl("Country",RECIPIENT))
fromCERFtmp <- subset(fromCERFtmp, !grepl("Total",RECIPIENT))
fromCERFtmp <- subset(fromCERFtmp, !grepl(as.character(year),RECIPIENT))
if(exists("fromCERF")){fromCERF <- rbind(fromCERF,fromCERFtmp)}else{fromCERF <- fromCERFtmp}
rm(page)
#To
page <- html(paste0(toUrl,year))
toCERFtmp <- page %>%
html_node("table") %>%
html_table(fill=TRUE)
if("Donors" %in% names(toCERFtmp)){
toCERFtmp <- toCERFtmp[,c(2,3)]
toCERFtmp$obsTime <- year
toCERFtmp$RECIPIENT <- "Central Emergency Response Fund"
names(toCERFtmp) <- c("DONOR","obsValue","obsTime","RECIPIENT")
toCERFtmp$obsValue <- as.numeric(gsub(",","", toCERFtmp$obsValue))
toCERFtmp <- subset(toCERFtmp,!is.na(DONOR))
if(exists("toCERF")){toCERF <- rbind(toCERF,toCERFtmp)}else{toCERF <- toCERFtmp}
}
rm(page)
}
#install.packages("jsonlite")
#install.packages("curl")
#install.packages("plyr")
library(jsonlite)
library(plyr)
wd <- "C:/Users/alexm/Documents/"
setwd(wd)
#years = c(2005:2015)
years = c(2015)
####Meta-data####
root <- "http://fts.unocha.org/api/v1/"
countries <- fromJSON(paste(root,"country.json",sep=""))
sectors <- fromJSON(paste(root,"sector.json",sep=""))
organizations <- fromJSON(paste(root,"organization.json",sep=""))
emergencies <- fromJSON(paste(root,"Emergency/year/",years[1],".json",sep=""))
if(length(years)>1){
for(i in 2:length(years)){
year <- years[i]
emergencies <- rbind(emergencies, fromJSON(paste(root,"Emergency/year/",year,".json",sep="")))
print(paste("Pulling emergencies for year ==",year))
}
}
contrib_emerg <- fromJSON(paste(root,"Contribution/emergency/",emergencies$id[1],".json",sep=""))
for(i in 2:nrow(emergencies)){
contrib_emerg <- rbind(contrib_emerg, fromJSON(paste(root,"Contribution/emergency/",emergencies$id[i],".json",sep="")))
print(paste("Pulling contributions for emergency ==",emergencies$id[i]))
}
View(contrib_emerg)
appeals <- fromJSON(paste(root,"Appeal/year/",years[1],".json",sep=""))
if(length(years)>1){
for(i in 2:length(years)){
year <- years[i]
appeals <- rbind(appeals, fromJSON(paste(root,"Appeal/year/",year,".json",sep="")))
print(paste("Pulling appeals for year ==",year))
}
}
projects <- fromJSON(paste(root,"Project/appeal/",appeals$id[1],".json",sep=""))
for(i in 2:nrow(appeals)){
projects <- rbind(projects, fromJSON(paste(root,"Project/appeal/",appeals$id[i],".json",sep="")))
print(paste("Pulling projects for appeal ==",appeals$id[i]))
}
View(projects)
?grepl
grepl("women","this project is about women")
#install.packages("ggplot2")
#install.packages("extrafont")
#install.packages("plyr")
library(ggplot2)
library(plyr)
library(extrafont)
#font_import()
loadfonts()
ghahex <- c(
"#fcd800" #Yellow
,"#67cdca" #Blue
,"#Ffa03c" #Orange
,"#61c994" #Green
,"#a169de" #Purple
,"#A6f2eb" #Light blue
,"#8eb8b4" #Grey blue
,"#ff8f19" #Orange
,"#b5a384" #Brown
,"#99e354" #Greem
)
wd <- "C:/git/alexm-util/DevInit/R/GHA/"
setwd(wd)
#First chart####
data <- read.csv("scaled_pies.csv")
# Calculate the percentages
data = ddply(data, .(country), transform, percent = usd/total)
# Format the labels and calculate their positions
data <- ddply(data, .(country), transform, pos = (cumsum(percent) - 0.5 * percent))
data$label <- paste0(sprintf("%.0f", data$percent*100), "%")
#data$label <- paste0("$",round(data$usd),"m")
p <- ggplot(data,aes(fill=sector,x=total/2,y=usd,width=total)) +
geom_bar(position="fill", stat="identity") +
geom_text(aes(y = pos, x = total+60, label = label), size = 4,family="Calibri") +
facet_grid(. ~ country) +
coord_polar(theta="y") +
theme_bw() +
theme(panel.grid=element_blank()) +
theme(axis.text=element_blank()) +
theme(axis.ticks=element_blank()) +
theme(axis.title=element_blank()) +
theme(legend.position="bottom") +
theme(strip.background = element_blank()) +
theme(panel.border = element_blank()) +
theme(legend.title = element_blank()) +
theme(strip.text = element_text(size=15)) +
theme(text = element_text(family="Calibri")) +
scale_fill_manual(values=ghahex)
#+ geom_text(x=1,y=1,aes(label=paste0("$",total,"m")),family="Calibri")
p
