,"GB-9"
,"GB-10"
#,"XM-DAC-12-22"
,"GB-GOV-8"
,"GB-COH-RC000346"
)
empty <- fromJSON("http://www.d-portal.org/q?from=act%2Ctrans%2Csector&limit=-1&select=sector_code%2Csum_of_percent_of_trans_usd&groupby=sector_code&trans_code=D%7CE&trans_day_gteq=2014-01-01&trans_day_lt=2015-01-01&reporting_ref=GB-1&view=publisher_sectors&_=1441789807497")[[1]][0,]
empty$year <- double(0)
empty$donor <- character(0)
data <- foreach(i=1:length(gbs),.packages=c("jsonlite")
,.combine=rbind) %do% {
gb <- gbs[i]
statsUrl <- paste0("http://www.d-portal.org/q?select=stats&from=act&reporting_ref=",gb,"&view=publisher&_=1441790527948")
donorname <- fromJSON(statsUrl)[[1]]["MAX(reporting)"][1,1]
message(donorname)
url2013 <- paste0("http://www.d-portal.org/q?from=act%2Ctrans%2Csector&limit=-1&select=sector_code%2Csum_of_percent_of_trans_usd&groupby=sector_code&trans_code=D%7CE&trans_day_gteq=2013-01-01&trans_day_lt=2014-01-01&reporting_ref=",gb,"&view=publisher_sectors&_=1441789807495")
dat2013 <- fromJSON(url2013)[[1]]
dat2013$year <- 2013
dat2013$donor <- donorname
if(is.null(nrow(dat2013))){
dat2013 <- empty
}
url2014 <- paste0("http://www.d-portal.org/q?from=act%2Ctrans%2Csector&limit=-1&select=sector_code%2Csum_of_percent_of_trans_usd&groupby=sector_code&trans_code=D%7CE&trans_day_gteq=2014-01-01&trans_day_lt=2015-01-01&reporting_ref=",gb,"&view=publisher_sectors&_=1441789807497")
dat2014 <- fromJSON(url2014)[[1]]
dat2014$year <- 2014
dat2014$donor <- donorname
if(is.null(nrow(dat2014))){
dat2014 <- empty
}
url2015 <- paste0("http://www.d-portal.org/q?from=act%2Cbudget%2Csector&limit=-1&select=sector_code%2Csum_of_percent_of_budget_usd&budget_priority=1&groupby=sector_code&budget_day_end_gteq=2015-01-01&budget_day_end_lt=2016-01-01&reporting_ref=",gb,"&view=publisher_sectors&_=1441789807501")
dat2015 <- fromJSON(url2015)[[1]]
dat2015$year <- 2015
dat2015$donor <- donorname
names(dat2015)[2] <- "sum_of_percent_of_trans_usd"
if(is.null(nrow(dat2015))){
dat2015 <- empty
}
dat <- rbind(dat2013,dat2014,dat2015)
return(dat)
}
View(data)
unique(data$donor)
pov <- read.csv("uganda-poverty-headcount.csv",as.is=TRUE)
setwd("C:/git/digital-platform/country-year")
districts <- read.csv(
"../reference/uganda-district-entity.csv"
,na.strings=""
,as.is=TRUE)
pov <- read.csv("uganda-poverty-headcount.csv",as.is=TRUE)
require(plyr)
set.seed(1234)
bins <- 20
probBin <- (range(pov$value)[2]-range(pov$value)[1])/bins
binList <- numeric(nrow(pov))
previousBin <- 0
for(i in 1:bins){
binMax = probBin*i
for(j in 1:nrow(sub)){
if(pov$value[j]>previousBin & pov$value[j]<=binMax){
binList[j] <- round(binMax*100)
}
}
previousBin <- binMax
}
require(plyr)
set.seed(1234)
bins <- 20
probBin <- (range(pov$value)[2]-range(pov$value)[1])/bins
binList <- numeric(nrow(pov))
previousBin <- 0
for(i in 1:bins){
binMax = probBin*i
for(j in 1:nrow(pov)){
if(pov$value[j]>previousBin & pov$value[j]<=binMax){
binList[j] <- round(binMax*100)
}
}
previousBin <- binMax
}
pov$count <- binList
View(pov)
dat <- ddply(pov,.(year,count),summarize,count=sum(!is.na(value)))
dat$year <- factor(dat$year, ordered=T)
p <- ggplot(data = dat, aes(x=count))
library(ggplot2)
p <- ggplot(data = dat, aes(x=count))
p <- p + geom_histogram(aes(weights=count, fill=state))
p <- p + facet_wrap( ~ state, ncol=1)
p
p <- ggplot(data = dat, aes(x=count))
p <- p + geom_histogram(aes(weights=count, fill=year))
p <- p + facet_wrap( ~ year, ncol=1)
p
p <- ggplot(data = dat, aes(x=count))
p <- p + geom_histogram(aes(weights=count))
p
###Credit to Kyle Walker, http://rpubs.com/walkerke/wdi_leaflet
#install.packages('rgdal')
#install.packages('WDI')
#install.packages('devtools')
#library(devtools)
#devtools::install_github("rstudio/leaflet")
library(rgdal)
library(WDI)
library(leaflet)
### Function to create a Leaflet interactive map in RStudio from a World Bank indicator.
wdi_leaflet <- function(indicator, indicator_alias = "Value", year = 2012, classes = 5, colors = "Blues") {
url <- "http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/cultural/ne_50m_admin_0_countries.zip"
tmp <- tempdir()
file <- basename(url)
download.file(url, file)
unzip(file, exdir = tmp)
countries <- readOGR(dsn = tmp,
layer = "ne_50m_admin_0_countries",
encoding = "UTF-8",
verbose = FALSE)
dat <- WDI(country = "all",
indicator = indicator,
start = year,
end = year)
dat[[indicator]] <- round(dat[[indicator]], 1)
countries2 <- merge(countries,
dat,
by.x = "iso_a2",
by.y = "iso2c",
sort = FALSE)
pal <- colorQuantile(colors, NULL, n = classes)
country_popup <- paste0("<strong>Country: </strong>",
countries2$country,
"<br><strong>",
indicator_alias,
", ",
as.character(year),
": </strong>",
countries2[[indicator]])
stamen_tiles <- "http://{s}.tile.stamen.com/toner-lite/{z}/{x}/{y}.png"
stamen_attribution <- 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a href="http://openstreetmap.org">OpenStreetMap</a>, under <a href="http://www.openstreetmap.org/copyright">ODbL</a>.'
leaflet(data = countries2) %>%
addTiles(urlTemplate = stamen_tiles,
attribution = stamen_attribution) %>%
setView(0, 0, zoom = 3) %>%
addPolygons(fillColor = ~pal(countries2[[indicator]]),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = country_popup)
}
## Example call
wdi_leaflet(indicator = "SP.RUR.TOTL.ZS", indicator_alias = "Percent rural", colors = "OrRd")
##wdi_leaflet("SP.URB.TOTL.IN.ZS")
###Function########################################################################################
###Thanks to Kyle Walker, http://rpubs.com/walkerke/wdi_leaflet
#install.packages('rgdal')
#install.packages('devtools')
#install.packages('plyr')
#library(devtools)
#devtools::install_github("rstudio/leaflet")
library(rgdal)
library(leaflet)
library(plyr)
### Function to create a Leaflet interactive map.
diRamp <- function(colorText1,colorText2=NA,colorText3=NA){
colorRef <- list("red"="#BA0C2F")
colorRef <- c(colorRef,"white"="#FFFFFF")
colorRef <- c(colorRef,"black"="#000000")
colorRef <- c(colorRef,"orange"="#EA7600")
colorRef <- c(colorRef,"purple"="#93328E")
colorRef <- c(colorRef,"blue"="#1B365D")
colorRef <- c(colorRef,"lightblue"="#0095CB")
colorRef <- c(colorRef,"yellow"="#B7BF10")
colorRef <- c(colorRef,"darkred"=rgb(96, 6, 24,1,maxColorValue=255))
colorRef <- c(colorRef,"pink"=rgb(251, 197, 208,1,maxColorValue=255))
colorRef <- c(colorRef,"blue4"=rgb(27, 54, 93,1,maxColorValue=255))
colorRef <- c(colorRef,"blue3"=rgb(73, 94, 125,1,maxColorValue=255))
colorRef <- c(colorRef,"blue2"=rgb(118, 134, 158,1,maxColorValue=255))
colorRef <- c(colorRef,"blue1"=rgb(164, 175, 190,1,maxColorValue=255))
colorRef <- c(colorRef,"blue0"=rgb(209, 215, 223,1,maxColorValue=255))
if(!is.na(colorText2)){
if(!is.na(colorText3)){
color1 <- colorRef[[colorText1]]
if(is.null(color1)){color1 <- colorText1}
color2 <- colorRef[[colorText2]]
if(is.null(color2)){color2 <- colorText2}
color3 <- colorRef[[colorText3]]
if(is.null(color3)){color3 <- colorText3}
colorRamp(c(color1,color2,color3), interpolate="linear")
}else{
color1 <- colorRef[[colorText1]]
if(is.null(color1)){color1 <- colorText1}
color2 <- colorRef[[colorText2]]
if(is.null(color2)){color2 <- colorText2}
colorRamp(c(color1,color2), interpolate="linear")
}
}else{
color1 <- colorRef[["white"]]
color2 <- colorRef[[colorText1]]
if(is.null(color2)){color2 <- colorText2}
colorRamp(c(color1,color2), interpolate="linear")
}
}
hub_leaflet <- function(series,indicator, year = NA, value = "value", classes = 5, colors = "Blues") {
url <- "http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/cultural/ne_50m_admin_0_countries.zip"
tmp <- tempdir()
file <- basename(url)
if(!file.exists(file)){
download.file(url, file)
}
unzip(file, exdir = tmp)
countries <- readOGR(dsn = tmp,
layer = "ne_50m_admin_0_countries",
encoding = "UTF-8",
verbose = FALSE)
datPath <- paste("C:/git/digital-platform/",series,"/",indicator,".csv",sep="")
dat <- read.csv(datPath, header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE,row.names=NULL)
if(!is.na(year)){
dat <- dat[which(dat$year==year),]
}
keep <- c("iso2c","year",indicator)
names(dat)[names(dat) == "id"] <- "iso2c"
names(dat)[names(dat) == value] <- indicator
dat <- dat[keep]
countries2 <- merge(countries,
dat,
by.x = "iso_a2",
by.y = "iso2c",
sort = FALSE)
countries2$country <- countries2$name
if(is.numeric(classes)){
if(length(classes)==1){
pal <- colorQuantile(colors, NULL, n = classes)
}else{
levels <- classes[order(classes)]
indDat <- dat[[indicator]]
indDat <- indDat[which(!is.na(indDat))]
indMin <- min(indDat)
indMax <- max(indDat)
if(levels[1]>indMin){
levels <- c(indMin,levels)
}
if(levels[length(levels)]<indMax){
levels <- c(levels,indMax)
}
pal <- colorBin(colors, c(indMin,indMax) , bins = levels)
}
}else{
conceptPath <- "C:/git/digital-platform/concepts.csv"
concepts <- read.csv(conceptPath, header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
range <- concepts[which(concepts$id==indicator&concepts$series=="country-year"),]$range
if(!is.na(range)){
classes <- as.numeric(strsplit(range,",")[[1]])
levels <- classes[order(classes)]
indDat <- dat[[indicator]]
indDat <- indDat[which(!is.na(indDat))]
indMin <- min(indDat)
indMax <- max(indDat)
if(levels[1]>indMin){
levels <- c(indMin,levels)
}
if(levels[length(levels)]<indMax){
levels <- c(levels,indMax)
}
pal <- colorBin(colors, c(indMin,indMax) , bins = levels)
}else{
warning("Error reading range from concepts.csv. Choosing 5 chucks instead.")
pal <- colorQuantile(colors, NULL, n = 5)
}
}
country_popup <- paste0("<strong>Country: </strong>",
countries2$country,
"<br><strong>",
indicator,
", ",
as.character(countries2$year),
": </strong>",
countries2[[indicator]])
stamen_tiles <- "http://{s}.tile.stamen.com/toner-lite/{z}/{x}/{y}.png"
stamen_attribution <- 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a href="http://openstreetmap.org">OpenStreetMap</a>, under <a href="http://www.openstreetmap.org/copyright">ODbL</a>.'
val<-countries2[[indicator]]
color<- pal(countries2[[indicator]])
legend <- data.frame(val,color,stringsAsFactors=FALSE)
legend <- ddply(legend,.(color),summarize,from=min(val),to=max(val),count=length(val),stringsAsFactors=FALSE)
legend <- legend[order(legend$from),]
legend$from.to <- paste(as.character(legend$from),as.character(legend$to),sep=" - ")
legend<- legend[c("color","from.to","count")]
for(i in 1:length(legend$from.to)){
if(legend$from.to[i]=="NA - NA"){
legend$from.to[i]="NA"
}
}
bp <- barplot(legend$count,
legend.text=legend$from.to,
beside=FALSE,
col=legend$color,
main = indicator)
text(bp, 0, round(legend$count, 1),cex=1,pos=3)
leaflet(data = countries2) %>%
#addTiles(urlTemplate = stamen_tiles,
#         attribution = stamen_attribution) %>%
setView(0, 0, zoom = 2) %>%
addPolygons(fillColor = ~pal(countries2[[indicator]]),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = country_popup)
}
##Syntax is:
#hub_leaflet(series,indicator,year,value,classes,colorRamp)
#Map appears in viewer, legend appears in plots along with count of data in those bins
####Files that appear in Global Picture
###Poverty########################################################################################
#avg-income-of-extreme-poor
#install.packages('WDI')
library(WDI)
#new_cache <- WDIcache()
wd <- "C:/git/digital-platform/country-year/"
entityPath <- "C:/git/digital-platform/reference/entity.csv"
entities <- read.csv(entityPath, header = TRUE,na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
entities <- entities[which(entities$type=="country"),]$id
setwd(wd)
indicator <- "SP.DYN.LE00.IN"
dat <- WDI(country = "all",
indicator = indicator,
start = 2000,
end = 2015,
extra = TRUE
#cache = new_cache
)
names(dat)[names(dat) == indicator] <- "value"
names(dat)[names(dat) == "iso2c"] <- "id"
keep <- c("id","year","value")
dat <- dat[keep]
id <- c()
year <- c()
value <- c()
for(i in 1:nrow(dat)){
if(dat$id[i] %in% entities){
id <- c(id,dat$id[i])
year <- c(year,dat$year[i])
value <- c(value,dat$value[i])
}
}
dat <- data.frame(id,year,value)
dat <- dat[order(dat$id,dat$year),]
write.csv(dat,"life-exp.csv",row.names=FALSE,na="")
hub_leaflet("latest-year","life-expectancy-at-birth",NA,"value",5,diRamp("lightblue"))
###Function########################################################################################
###Thanks to Kyle Walker, http://rpubs.com/walkerke/wdi_leaflet
#install.packages('rgdal')
#install.packages('devtools')
#install.packages('plyr')
#library(devtools)
#devtools::install_github("rstudio/leaflet")
library(rgdal)
library(leaflet)
library(plyr)
windows <- TRUE
if(windows){pathpre<-"C:"}else{pathpre<-"~"}
### Function to create a Leaflet interactive map.
diRamp <- function(colorText1,colorText2=NA,colorText3=NA){
colorRef <- list("red"="#BA0C2F")
colorRef <- c(colorRef,"white"="#FFFFFF")
colorRef <- c(colorRef,"black"="#000000")
colorRef <- c(colorRef,"orange"="#EA7600")
colorRef <- c(colorRef,"purple"="#93328E")
colorRef <- c(colorRef,"blue"="#1B365D")
colorRef <- c(colorRef,"lightblue"="#0095CB")
colorRef <- c(colorRef,"yellow"="#B7BF10")
colorRef <- c(colorRef,"darkred"=rgb(96, 6, 24,1,maxColorValue=255))
colorRef <- c(colorRef,"pink"=rgb(251, 197, 208,1,maxColorValue=255))
colorRef <- c(colorRef,"blue4"=rgb(27, 54, 93,1,maxColorValue=255))
colorRef <- c(colorRef,"blue3"=rgb(73, 94, 125,1,maxColorValue=255))
colorRef <- c(colorRef,"blue2"=rgb(118, 134, 158,1,maxColorValue=255))
colorRef <- c(colorRef,"blue1"=rgb(164, 175, 190,1,maxColorValue=255))
colorRef <- c(colorRef,"blue0"=rgb(209, 215, 223,1,maxColorValue=255))
if(!is.na(colorText2)){
if(!is.na(colorText3)){
color1 <- colorRef[[colorText1]]
if(is.null(color1)){color1 <- colorText1}
color2 <- colorRef[[colorText2]]
if(is.null(color2)){color2 <- colorText2}
color3 <- colorRef[[colorText3]]
if(is.null(color3)){color3 <- colorText3}
colorRamp(c(color1,color2,color3), interpolate="linear")
}else{
color1 <- colorRef[[colorText1]]
if(is.null(color1)){color1 <- colorText1}
color2 <- colorRef[[colorText2]]
if(is.null(color2)){color2 <- colorText2}
colorRamp(c(color1,color2), interpolate="linear")
}
}else{
color1 <- colorRef[["white"]]
color2 <- colorRef[[colorText1]]
if(is.null(color2)){color2 <- colorText2}
colorRamp(c(color1,color2), interpolate="linear")
}
}
ug_leaflet <- function(series,indicator, year = NA, value = "value", classes = 5, colors = "Blues") {
districts <- readOGR(dsn = paste0(pathpre,"/git/digital-platform/shape-files/uganda/uganda.shp"),
layer = "uganda",
encoding = "UTF-8",
verbose = FALSE)
datPath <- paste(paste0(pathpre,"/git/digital-platform/"),series,"/",indicator,".csv",sep="")
dat <- read.csv(datPath, header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE,row.names=NULL)
if(!is.na(year)){
dat <- dat[which(dat$year==year),]
}
keep <- c("id","year",indicator)
names(dat)[names(dat) == value] <- indicator
dat <- dat[keep]
districts2 <- merge(districts,
dat,
by = c("id"),
sort = FALSE)
districts2$district <- districts2$name
if(is.numeric(classes)){
if(length(classes)==1){
pal <- colorQuantile(colors, NULL, n = classes)
}else{
levels <- classes[order(classes)]
indDat <- dat[[indicator]]
indDat <- indDat[which(!is.na(indDat))]
indMin <- min(indDat)
indMax <- max(indDat)
if(levels[1]>indMin){
levels <- c(indMin,levels)
}
if(levels[length(levels)]<indMax){
levels <- c(levels,indMax)
}
pal <- colorBin(colors, c(indMin,indMax) , bins = levels)
}
}else{
conceptPath <- paste0(pathpre,"/git/digital-platform/concepts.csv")
concepts <- read.csv(conceptPath, header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
range <- concepts[which(concepts$id==indicator&concepts$series=="country-year"),]$range
if(!is.na(range)){
classes <- as.numeric(strsplit(range,",")[[1]])
levels <- classes[order(classes)]
indDat <- dat[[indicator]]
indDat <- indDat[which(!is.na(indDat))]
indMin <- min(indDat)
indMax <- max(indDat)
if(levels[1]>indMin){
levels <- c(indMin,levels)
}
if(levels[length(levels)]<indMax){
levels <- c(levels,indMax)
}
pal <- colorBin(colors, c(indMin,indMax) , bins = levels)
}else{
warning("Error reading range from concepts.csv. Choosing 5 chucks instead.")
pal <- colorQuantile(colors, NULL, n = 5)
}
}
popup <- paste0("<strong>District: </strong>",
districts2$district,
"<br><strong>",
indicator,
", ",
as.character(districts2$year),
": </strong>",
districts2[[indicator]])
stamen_tiles <- "http://{s}.tile.stamen.com/toner-lite/{z}/{x}/{y}.png"
stamen_attribution <- 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a href="http://openstreetmap.org">OpenStreetMap</a>, under <a href="http://www.openstreetmap.org/copyright">ODbL</a>.'
val<-districts2[[indicator]]
color<- pal(districts2[[indicator]])
legend <- data.frame(val,color,stringsAsFactors=FALSE)
legend <- ddply(legend,.(color),summarize,from=min(val),to=max(val),count=length(val),stringsAsFactors=FALSE)
legend <- legend[order(legend$from),]
legend$from.to <- paste(as.character(legend$from),as.character(legend$to),sep=" - ")
legend<- legend[c("color","from.to","count")]
for(i in 1:length(legend$from.to)){
if(legend$from.to[i]=="NA - NA"){
legend$from.to[i]="NA"
}
}
bp <- barplot(legend$count,
legend.text=legend$from.to,
beside=FALSE,
col=legend$color,
main = indicator)
text(bp, 0, round(legend$count, 1),cex=1,pos=3)
leaflet(data = districts2) %>%
#addTiles(urlTemplate = stamen_tiles,
#         attribution = stamen_attribution) %>%
setView(32, 1, zoom = 6) %>%
addPolygons(fillColor = ~pal(districts2[[indicator]]),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup)
}
##Syntax is:
#ug_leaflet(series,indicator,year,value,classes,colorRamp)
#Map appears in viewer, legend appears in plots along with count of data in those bins
#DPR
#Pov
ug_leaflet("country-year","uganda-life-expectancy",NA,"value",c(35,42,44,46,48),diRamp("darkred","red","pink"))
####Data Tech and the GHA####
#By Alex Miller
#Set working directory
wd <- "C:/git/alexm-util/DevInit/R/GHA/presentation/tmp"
root <- "C:/git/alexm-util/DevInit/R/GHA/presentation/"
setwd(wd)
#Delete everything in tmp
unlink(dir(wd, full.names = TRUE),recursive=TRUE)
toRemove <- list.files(root,pattern="*.jpg|*.xml",full.names=TRUE)
for(i in 1:length(toRemove)){
fileToRemove <- toRemove[i]
file.remove(fileToRemove)
}
