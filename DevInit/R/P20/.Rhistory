grep(":(.*?)-",x)
grep(":(.*?)-",x,value=TRUE)
gregexpr(":(.*?)-",x,value=TRUE)
gregexpr(":(.*?)-",x)
regexpr(":(.*?)-",x)
gsub(":(.*?)-",x)
gsub("(?<=\\()[^()]*(?=\\))(*SKIP)(*F)|.", "", x, perl=T)
gsub("(?<=\\:-[^:-]*:?=\\))(*SKIP)(*F)|.", "", x, perl=T)
gsub(".*\\((.*)\\).*", "\\1", x)
gsub(".*\\(:.*-\\).*", "\\1", x)
gsub(".*\\(/:.*/-\\).*", "\\1", x)
gsub(".*","",x)
gsub("^.*","",x)
gsub(".*\\((.*)\\).*", "\\1", x)
gsub(".*\\:(.*)\\).*", "\\1", x)
gsub(".*\\:(.*)\\-.*", "\\1", x)
gsub(".*\\:(.*)\\-.*", "\\1", tab$start.string)
tab$start <- gsub(".*\\:(.*)\\-.*", "\\1", tab$start.string)
View(tab)
gsub(".*\\:(.*)\\-.*", "\\1", x)
View(tab)
gsub(".*\\-(.*)\\-.*", "\\1", x)
gsub(".*\\-(.*)", "\\1", x)
View(tab)
x = "1: 27-32"
gsub(".*\\-(.*)", "\\1", x)
tab$end <- gsub(".*\\-(.*)", "\\1", tab$start.string)
View(tab)
tab$end-tab$start
as.int
as.integer
tab$start <- as.integer(gsub(".*\\:(.*)\\-.*", "\\1", tab$start.string))
tab$end <- as.integer(gsub(".*\\-(.*)", "\\1", tab$start.string))
tab$end-tab$start
tab$width <- (tab$end-tab$start)+1
View(tab)
sub(tab$width)
sum(tab$width)
library(readr)
?read_fwf
filename <- readLines(dct_file)[1]
first_line <- readLines(dct_file)[1]
file_name <- gsub(".*\\"(.*)\\".*", "\\1", first_line)
file_name <- gsub('.*\\"(.*)\\".*', "\\1", first_line)
first_line <- readLines(dct_file)[1]
file_name <- gsub('.*\\"(.*)\\".*', "\\1", first_line)
tab <- read.table(dct_file,header=FALSE,skip=2,sep="",fill=TRUE
,col.names=c("data.type","var.name","start.string1","start.string2")
)
tab$start.string = paste(tab$start.string1,tab$start.string2)
tab <- subset(tab,start.string!=" ")
tab$start <- as.integer(gsub(".*\\:(.*)\\-.*", "\\1", tab$start.string))
tab$end <- as.integer(gsub(".*\\-(.*)", "\\1", tab$start.string))
tab$width <- (tab$end-tab$start)+1
dat <- read_fwf(filename
,fwf_widths(tab$width,col_names=tab$var.name)
,col_types=paste(rep("n",nrow(tab)),collapse="")
)
dct_file <- "C:/Users/Alex/Downloads/AFBR70FL/AFBR70FL.DCT"
first_line <- readLines(dct_file)[1]
file_name <- gsub('.*\\"(.*)\\".*', "\\1", first_line)
base_name <- basename(file_name)
?basename
file_path <- dirname(dct_file)
full_path_file <- paste(file_path,base_name,sep="/")
full_path_file
first_line <- readLines(dct_file)[1]
file_name <- gsub('.*\\"(.*)\\".*', "\\1", first_line)
base_name <- basename(file_name)
file_path <- dirname(dct_file)
full_path_file <- paste(file_path,base_name,sep="/")
tab <- read.table(dct_file,header=FALSE,skip=2,sep="",fill=TRUE
,col.names=c("data.type","var.name","start.string1","start.string2")
)
tab$start.string = paste(tab$start.string1,tab$start.string2)
tab <- subset(tab,start.string!=" ")
tab$start <- as.integer(gsub(".*\\:(.*)\\-.*", "\\1", tab$start.string))
tab$end <- as.integer(gsub(".*\\-(.*)", "\\1", tab$start.string))
tab$width <- (tab$end-tab$start)+1
dat <- read_fwf(full_path_file
,fwf_widths(tab$width,col_names=tab$var.name)
,col_types=paste(rep("n",nrow(tab)),collapse="")
)
paste(rep("n",nrow(tab)),collapse="")
dat <- read_fwf(full_path_file
,fwf_widths(tab$width,col_names=tab$var.name)
# ,col_types=paste(rep("n",nrow(tab)),collapse="")
)
tab$var.name
?read.table
tab <- read.table(dct_file,header=FALSE,skip=2,sep="",fill=TRUE
,col.names=c("data.type","var.name","start.string1","start.string2")
,as.is=TRUE
)
tab$start.string = paste(tab$start.string1,tab$start.string2)
tab <- subset(tab,start.string!=" ")
tab$start <- as.integer(gsub(".*\\:(.*)\\-.*", "\\1", tab$start.string))
tab$end <- as.integer(gsub(".*\\-(.*)", "\\1", tab$start.string))
tab$width <- (tab$end-tab$start)+1
View(tab)
dat <- read_fwf(full_path_file
,fwf_widths(tab$width,col_names=tab$var.name)
,col_types=paste(rep("n",nrow(tab)),collapse="")
)
View(dat)
View(tab)
dat <- read_fwf(full_path_file
,fwf_widths(tab$width,col_names=tab$var.name)
# ,col_types=paste(rep("n",nrow(tab)),collapse="")
)
View(dat)
spec(dat)
a <- spec(dat)
a[1]
View(a[1])
View(a[2])
View(a[1])
View(data.frame(a[1]))
a
a[1]
a[2]
dat[1,]
dat[,1]
dat[,1187]
dat[,1175]
dat[,1174]
describe(dat[,1174])
library(Hmisc)
describe(dat[,1174])
describe(dat[,1175])
describe(dat[,1187])
dat <- read_fwf(full_path_file
,fwf_widths(tab$width,col_names=tab$var.name)
)
describe(dat$s534t)
dct_file <- "C:/Users/Alex/Downloads/AFBR70FL/AFBR70FL.DCT"
library(readr)
readdct = function(dct_file){
first_line <- readLines(dct_file)[1]
file_name <- gsub('.*\\"(.*)\\".*', "\\1", first_line)
base_name <- basename(file_name)
file_path <- dirname(dct_file)
full_path_file <- paste(file_path,base_name,sep="/")
tab <- read.table(dct_file,header=FALSE,skip=2,sep="",fill=TRUE
,col.names=c("data.type","var.name","start.string1","start.string2")
,as.is=TRUE
)
tab$start.string = paste(tab$start.string1,tab$start.string2)
tab <- subset(tab,start.string!=" ")
tab$start <- as.integer(gsub(".*\\:(.*)\\-.*", "\\1", tab$start.string))
tab$end <- as.integer(gsub(".*\\-(.*)", "\\1", tab$start.string))
tab$width <- (tab$end-tab$start)+1
dat <- read_fwf(full_path_file
,fwf_widths(tab$width,col_names=tab$var.name)
)
return(data.frame(dat))
}
dat <- readdct(dct_file)
describe(dat$s534t)
names(dat)
describe(dat$caseid)
library(survey)
?svydesign
?svymean
?svymean
library(rCharts)
df <- data.frame(x=c(1:12,1:12),
y=c(0.6, 0.5, 0.3, 0.3, 0.8, 0.99, 0.6, 0.5, 0.4, 0.7, 0.6, 0.8,
0.4, 0.5, 0.7, 0.7, 0.2, 0.01, 0.4, 0.5, 0.6, 0.3, 0.4, 0.2),
group=c(rep("group1",12),rep("group2",12)))
df$cat <- c(rep(c(rep("A",6),rep("B",6)),2))
require(devtools)
install_github('rCharts', 'ramnathv')
library(rCharts)
df <- data.frame(x=c(1:12,1:12),
y=c(0.6, 0.5, 0.3, 0.3, 0.8, 0.99, 0.6, 0.5, 0.4, 0.7, 0.6, 0.8,
0.4, 0.5, 0.7, 0.7, 0.2, 0.01, 0.4, 0.5, 0.6, 0.3, 0.4, 0.2),
group=c(rep("group1",12),rep("group2",12)))
df$cat <- c(rep(c(rep("A",6),rep("B",6)),2))
p <- hPlot(x = "x", y = "y", data = df, type = c("column"),group="group")
p
p$tooltip(formatter="#!function () {
return 'The value for <b>' + this.x +
'</b> is <b>' + this.y + '</b>';
}!#")
p
p$tooltip(formatter="#!function () {
console.log(this);
return 'The value for <b>' + this.x +
'</b> is <b>' + this.y + '</b>';
}!#")
p
library(rCharts)
df <- data.frame(HumanHazard=c(1:12,1:12),
NaturalHazard=c(0.6, 0.5, 0.3, 0.3, 0.8, 0.99, 0.6, 0.5, 0.4, 0.7, 0.6, 0.8,
0.4, 0.5, 0.7, 0.7, 0.2, 0.01, 0.4, 0.5, 0.6, 0.3, 0.4, 0.2),
group=c(rep("group1",12),rep("group2",12)))
df$region <- c(rep(c(rep("A",6),rep("B",6)),2))
df$GrossOda <- c(12:24,12:24)
df$CountryName <- c(rep(c(rep("C",6),rep("D",6)),2))
df$region <- c(rep(c(rep("A",6),rep("B",6)),2))
df$GrossOda <- c(12:24,12:24)
df$GrossOda <- c(12:22,12:22)
df$GrossOda <- c(12:23,12:23)
df$CountryName <- c(rep(c(rep("C",6),rep("D",6)),2))
p1 <- hPlot(HumanHazard ~ NaturalHazard, data = df, type = "bubble", title = "Bubble chart", subtitle = "Adam Hughes",
size = "GrossOda", group = "region", hoverinfo = "CountryName")
p1$tooltip(formatter = "#!function() {
return 'The value for <b>' + this.x +
'</b> is <b>' + this.y + '</b>';
}!#")
p1$colors("#443e42", "#f8c1b2", "#f0826d", "#8f1b13", "#8f1b13")
p1$legend(enabled = T)
p1
library(rCharts)
df <- data.frame(HumanHazard=c(1:12,1:12),
NaturalHazard=c(0.6, 0.5, 0.3, 0.3, 0.8, 0.99, 0.6, 0.5, 0.4, 0.7, 0.6, 0.8,
0.4, 0.5, 0.7, 0.7, 0.2, 0.01, 0.4, 0.5, 0.6, 0.3, 0.4, 0.2),
group=c(rep("group1",12),rep("group2",12)))
df$region <- c(rep(c(rep("A",6),rep("B",6)),2))
df$GrossOda <- c(12:23,12:23)
df$CountryName <- c(rep(c(rep("C",6),rep("D",6)),2))
p1 <- hPlot(HumanHazard ~ NaturalHazard, data = df, type = "bubble", title = "Bubble chart", subtitle = "Adam Hughes",
size = "GrossOda", group = "region", hoverinfo = "CountryName")
p1$tooltip(formatter = "#!function() {
console.log(this);
return 'The value for <b>' + this.x +
'</b> is <b>' + this.y + '</b>';
}!#")
p1$colors("#443e42", "#f8c1b2", "#f0826d", "#8f1b13", "#8f1b13")
p1$legend(enabled = T)
p1
p1 <- hPlot(y = "HumanHazard",x = "NaturalHazard", data = df, type = "bubble", title = "Bubble chart", subtitle = "Adam Hughes",
size = "GrossOda", group = "region", hoverinfo = "CountryName")
p1$tooltip(formatter = "#!function() {
console.log(this);
return 'The value for <b>' + this.x +
'</b> is <b>' + this.y + '</b>';
}!#")
p1$colors("#443e42", "#f8c1b2", "#f0826d", "#8f1b13", "#8f1b13")
p1$legend(enabled = T)
p1
p1 <- hPlot(y = "HumanHazard", x = "NaturalHazard", a="CountryName" data = df, type = "bubble", title = "Bubble chart", subtitle = "Adam Hughes",
size = "GrossOda", group = "region", hoverinfo = "CountryName")
p1 <- hPlot(y = "HumanHazard", x = "NaturalHazard", a="CountryName", data = df, type = "bubble", title = "Bubble chart", subtitle = "Adam Hughes",
size = "GrossOda", group = "region", hoverinfo = "CountryName")
p1$tooltip(formatter = "#!function() {
console.log(this);
return 'The value for <b>' + this.x +
'</b> is <b>' + this.y + '</b>';
}!#")
p1$colors("#443e42", "#f8c1b2", "#f0826d", "#8f1b13", "#8f1b13")
p1$legend(enabled = T)
p1
?hPlot
??hPlot
library(rCharts)
d <- data.frame(x=c(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),
y=c(0.7,0.8,0.7,0.3,0.5,0.2,0.4,0.4,0.5,0.5,
0.3,0.2,0.3,0.7,0.5,0.8,0.6,0.6,0.5,0.7),
type=factor(c("A","A","A","A","A","A","A","A","A","A","B","B","B","B","B","B","B","B","B","B")),
pop=c("Group 1","Group 1","Group 1","Group 1","Group 1","Group 1","Group 2","Group 2","Group 2","Group 2",
"Group 1","Group 1","Group 1","Group 1","Group 1","Group 1","Group 2","Group 2","Group 2","Group 2"))
hm <- rCharts:::Highcharts$new()
dlev <- levels(d$type)
for(i in 1:length(dlev))
{
hm$series(data = toJSONArray2(d[d$type==dlev[i],,drop=F], json = F,names=T), name = dlev[i],type = c("column"), marker = list(radius = 3))
}
hm$plotOptions(column = list(stacking = "normal", pointPadding = 0, groupPadding = 0, borderWidth = 0))
hm$tooltip(borderWidth=0, followPointer=TRUE, followTouchMove=TRUE, shared = FALSE,
formatter = "#! function(){return this.point.x + '<br>' + this.point.pop + '<br>'+ this.point.type + ': ' + this.point.y;} !#")
hm
clara <- data.frame(HumanHazard=c(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),
NaturalHazard=c(0.7,0.8,0.7,0.3,0.5,0.2,0.4,0.4,0.5,0.5,
0.3,0.2,0.3,0.7,0.5,0.8,0.6,0.6,0.5,0.7),
GrossOda=c(0.7,0.8,0.7,0.3,0.5,0.2,0.4,0.4,0.5,0.5,
0.3,0.2,0.3,0.7,0.5,0.8,0.6,0.6,0.5,0.7),
region=factor(c("A","A","A","A","A","A","A","A","A","A","B","B","B","B","B","B","B","B","B","B")),
CountryName=c("Group 1","Group 1","Group 1","Group 1","Group 1","Group 1","Group 2","Group 2","Group 2","Group 2",
"Group 1","Group 1","Group 1","Group 1","Group 1","Group 1","Group 2","Group 2","Group 2","Group 2"))
rlev = levels(clara$region)
toJSONArray2()
toJSONArray2
p1 = rCharts:::Highcharts$new()
rlev = levels(clara$region)
for(i in 1:length(rlev))
{
p1$series(data = toJSONArray2(clara[clara$region==rlev[i],,drop=F], json = F,names=T), name = rlev[i],type = c("bubble"), marker = list(radius = 3))
}
p1
p1$plotOptions(bubble = list(pointPadding = 0, groupPadding = 0, borderWidth = 0))
p1
rlev = levels(clara$region)
p1 <- hPlot(HumanHazard ~ NaturalHazard, data = clara, type = "bubble", title = "Bubble chart", subtitle = "Adam Hughes",
size = "GrossOda", group = "region", hoverinfo = "CountryName")
p1
for(i in 1:length(rlev))
{
p1$series(data = toJSONArray2(clara[clara$region==rlev[i],,drop=F], json = F,names=T), name = rlev[i],type = c("bubble"), marker = list(radius = 3))
}
p1
p1$plotOptions(bubble = list(pointPadding = 0, groupPadding = 0, borderWidth = 0))
p1
rlev = levels(clara$region)
p1 <- hPlot(HumanHazard ~ NaturalHazard, data = clara, type = "bubble", title = "Bubble chart", subtitle = "Adam Hughes",
size = "GrossOda", group = "region", hoverinfo = "CountryName")
for(i in 1:length(rlev))
{
p1$series(data = toJSONArray2(clara[clara$region==rlev[i],,drop=F], json = F,names=T), name = rlev[i],type = c("bubble"), marker = list(radius = 3))
}
p1$tooltip(formatter="#!function () {
return '<p><b>Country: </b>' +
this.CountryName +
'</p><p><b>Human Hazard: </b>' +
this.y +
'</p><p><b>Natural Hazard: </b>' +
this.x +
'</p><p><b>ODA: </b>$' +
this.GrossOda + '</p>';
}!#")
p1
p1$tooltip(formatter="#!function () {
return '<p><b>Country: </b>' +
this.point.CountryName +
'</p><p><b>Human Hazard: </b>' +
this.y +
'</p><p><b>Natural Hazard: </b>' +
this.x +
'</p><p><b>ODA: </b>$' +
this.point.GrossOda + '</p>';
}!#")
p1
p1$tooltip(formatter="#!function () {
console.log(this);
return '<p><b>Country: </b>' +
this.point.CountryName +
'</p><p><b>Human Hazard: </b>' +
this.y +
'</p><p><b>Natural Hazard: </b>' +
this.x +
'</p><p><b>ODA: </b>$' +
this.point.GrossOda + '</p>';
}!#")
p1
library(rCharts)
d <- data.frame(x=c(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),
y=c(0.7,0.8,0.7,0.3,0.5,0.2,0.4,0.4,0.5,0.5,
0.3,0.2,0.3,0.7,0.5,0.8,0.6,0.6,0.5,0.7),
type=factor(c("A","A","A","A","A","A","A","A","A","A","B","B","B","B","B","B","B","B","B","B")),
pop=c("Group 1","Group 1","Group 1","Group 1","Group 1","Group 1","Group 2","Group 2","Group 2","Group 2",
"Group 1","Group 1","Group 1","Group 1","Group 1","Group 1","Group 2","Group 2","Group 2","Group 2"))
hm <- rCharts:::Highcharts$new()
dlev <- levels(d$type)
for(i in 1:length(dlev))
{
hm$series(data = toJSONArray2(d[d$type==dlev[i],,drop=F], json = F,names=T), name = dlev[i],type = c("column"), marker = list(radius = 3))
}
hm$plotOptions(column = list(stacking = "normal", pointPadding = 0, groupPadding = 0, borderWidth = 0))
hm$tooltip(borderWidth=0, followPointer=TRUE, followTouchMove=TRUE, shared = FALSE,
formatter = "#! function(){return this.point.x + '<br>' + this.point.pop + '<br>'+ this.point.type + ': ' + this.point.y;} !#")
hm
library(rCharts)
d <- data.frame(x=c(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),
y=c(0.7,0.8,0.7,0.3,0.5,0.2,0.4,0.4,0.5,0.5,
0.3,0.2,0.3,0.7,0.5,0.8,0.6,0.6,0.5,0.7),
type=factor(c("A","A","A","A","A","A","A","A","A","A","B","B","B","B","B","B","B","B","B","B")),
pop=c("Group 1","Group 1","Group 1","Group 1","Group 1","Group 1","Group 2","Group 2","Group 2","Group 2",
"Group 1","Group 1","Group 1","Group 1","Group 1","Group 1","Group 2","Group 2","Group 2","Group 2"))
hm <- rCharts:::Highcharts$new()
dlev <- levels(d$type)
for(i in 1:length(dlev))
{
hm$series(data = toJSONArray2(d[d$type==dlev[i],,drop=F], json = F,names=T), name = dlev[i],type = c("column"), marker = list(radius = 3))
}
hm$plotOptions(column = list(stacking = "normal", pointPadding = 0, groupPadding = 0, borderWidth = 0))
hm$tooltip(borderWidth=0, followPointer=TRUE, followTouchMove=TRUE, shared = FALSE,
formatter = "#! function(){return this.point.x + '<br>' + this.point.pop + '<br>'+ this.point.type + ': ' + this.point.y;} !#")
hm
library(rCharts)
d <- data.frame(x=c(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),
y=c(0.7,0.8,0.7,0.3,0.5,0.2,0.4,0.4,0.5,0.5,
0.3,0.2,0.3,0.7,0.5,0.8,0.6,0.6,0.5,0.7),
type=factor(c("A","A","A","A","A","A","A","A","A","A","B","B","B","B","B","B","B","B","B","B")),
pop=c("Group 1","Group 1","Group 1","Group 1","Group 1","Group 1","Group 2","Group 2","Group 2","Group 2",
"Group 1","Group 1","Group 1","Group 1","Group 1","Group 1","Group 2","Group 2","Group 2","Group 2"))
hm <- rCharts:::Highcharts$new()
dlev <- levels(d$type)
for(i in 1:length(dlev))
{
hm$series(data = toJSONArray2(d[d$type==dlev[i],,drop=F], json = F,names=T), name = dlev[i],type = c("column"), marker = list(radius = 3))
}
hm$plotOptions(column = list(stacking = "normal", pointPadding = 0, groupPadding = 0, borderWidth = 0))
hm$tooltip(borderWidth=0, followPointer=TRUE, followTouchMove=TRUE, shared = FALSE,
formatter = "#! function(){console.log(this);return this.point.x + '<br>' + this.point.pop + '<br>'+ this.point.type + ': ' + this.point.y;} !#")
hm
library(rCharts)
clara <- data.frame(HumanHazard=c(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),
NaturalHazard=c(0.7,0.8,0.7,0.3,0.5,0.2,0.4,0.4,0.5,0.5,
0.3,0.2,0.3,0.7,0.5,0.8,0.6,0.6,0.5,0.7),
GrossOda=c(0.7,0.8,0.7,0.3,0.5,0.2,0.4,0.4,0.5,0.5,
0.3,0.2,0.3,0.7,0.5,0.8,0.6,0.6,0.5,0.7),
region=factor(c("A","A","A","A","A","A","A","A","A","A","B","B","B","B","B","B","B","B","B","B")),
CountryName=c("Group 1","Group 1","Group 1","Group 1","Group 1","Group 1","Group 2","Group 2","Group 2","Group 2",
"Group 1","Group 1","Group 1","Group 1","Group 1","Group 1","Group 2","Group 2","Group 2","Group 2"))
clara$x = clara$NaturalHazard
clara$y = clara$HumanHazard
clara$z = clara$GrossOda
p1 = rCharts:::Highcharts$new()
rlev = levels(clara$region)
for(i in 1:length(rlev))
{
p1$series(data = toJSONArray2(clara[clara$region==rlev[i],,drop=F], json = F,names=T), name = rlev[i],type = c("bubble"), marker = list(radius = 3))
}
p1$plotOptions(bubble = list(pointPadding = 0, groupPadding = 0, borderWidth = 0))
p1
library(rCharts)
clara <- data.frame(HumanHazard=c(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),
NaturalHazard=c(0.7,0.8,0.7,0.3,0.5,0.2,0.4,0.4,0.5,0.5,
0.3,0.2,0.3,0.7,0.5,0.8,0.6,0.6,0.5,0.7),
GrossOda=c(0.7,0.8,0.7,0.3,0.5,0.2,0.4,0.4,0.5,0.5,
0.3,0.2,0.3,0.7,0.5,0.8,0.6,0.6,0.5,0.7),
region=factor(c("A","A","A","A","A","A","A","A","A","A","B","B","B","B","B","B","B","B","B","B")),
CountryName=c("Group 1","Group 1","Group 1","Group 1","Group 1","Group 1","Group 2","Group 2","Group 2","Group 2",
"Group 1","Group 1","Group 1","Group 1","Group 1","Group 1","Group 2","Group 2","Group 2","Group 2"))
clara$x = clara$NaturalHazard
clara$y = clara$HumanHazard
clara$z = clara$GrossOda
p1 = rCharts:::Highcharts$new()
rlev = levels(clara$region)
for(i in 1:length(rlev))
{
p1$series(data = toJSONArray2(clara[clara$region==rlev[i],,drop=F], json = F,names=T), name = rlev[i],type = c("bubble"), marker = list(radius = 3))
}
p1$plotOptions(bubble = list(pointPadding = 0, groupPadding = 0, borderWidth = 0))
p1$tooltip(formatter="#!function () {
return '<p><b>Country: </b>' +
this.point.CountryName +
'</p><p><b>Human Hazard: </b>' +
this.point.y +
'</p><p><b>Natural Hazard: </b>' +
this.point.x +
'</p><p><b>ODA: </b>$' +
this.point.z + '</p>';
}!#")
p1$colors("#443e42", "#f8c1b2", "#f0826d", "#8f1b13", "#8f1b13")
p1$legend(enabled = T)
p1
library(rCharts)
clara <- data.frame(HumanHazard=c(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),
NaturalHazard=c(0.7,0.8,0.7,0.3,0.5,0.2,0.4,0.4,0.5,0.5,
0.3,0.2,0.3,0.7,0.5,0.8,0.6,0.6,0.5,0.7),
GrossOda=c(0.7,0.8,0.7,0.3,0.5,0.2,0.4,0.4,0.5,0.5,
0.3,0.2,0.3,0.7,0.5,0.8,0.6,0.6,0.5,0.7),
region=factor(c("A","A","A","A","A","A","A","A","A","A","B","B","B","B","B","B","B","B","B","B")),
CountryName=c("Group 1","Group 1","Group 1","Group 1","Group 1","Group 1","Group 2","Group 2","Group 2","Group 2",
"Group 1","Group 1","Group 1","Group 1","Group 1","Group 1","Group 2","Group 2","Group 2","Group 2"))
clara$x = clara$NaturalHazard
clara$y = clara$HumanHazard
clara$z = clara$GrossOda
p1 = rCharts:::Highcharts$new()
rlev = levels(clara$region)
for(i in 1:length(rlev))
{
p1$series(data = toJSONArray2(clara[clara$region==rlev[i],,drop=F], json = F,names=T), name = rlev[i],type = c("bubble"), marker = list(radius = 3))
}
p1$plotOptions(bubble = list(pointPadding = 0, groupPadding = 0, borderWidth = 0))
p1$tooltip(useHTML = T, formatter="#!function () {
return '<b>Country: </b>' +
this.hoverinfo +
'</br><b>Human Hazard: </b>' +
this.y +
'</br><b>Natural Hazard: </b>' +
this.x +
'</br><b>ODA: </b>$' +
this.size;
}!#")
p1$colors("#443e42", "#f8c1b2", "#f0826d", "#8f1b13", "#8f1b13")
p1$legend(enabled = T)
p1
library(rCharts)
clara <- data.frame(HumanHazard=c(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),
NaturalHazard=c(0.7,0.8,0.7,0.3,0.5,0.2,0.4,0.4,0.5,0.5,
0.3,0.2,0.3,0.7,0.5,0.8,0.6,0.6,0.5,0.7),
GrossOda=c(0.7,0.8,0.7,0.3,0.5,0.2,0.4,0.4,0.5,0.5,
0.3,0.2,0.3,0.7,0.5,0.8,0.6,0.6,0.5,0.7),
region=factor(c("A","A","A","A","A","A","A","A","A","A","B","B","B","B","B","B","B","B","B","B")),
CountryName=c("Group 1","Group 1","Group 1","Group 1","Group 1","Group 1","Group 2","Group 2","Group 2","Group 2",
"Group 1","Group 1","Group 1","Group 1","Group 1","Group 1","Group 2","Group 2","Group 2","Group 2"))
clara$x = clara$NaturalHazard
clara$y = clara$HumanHazard
clara$z = clara$GrossOda
p1 = rCharts:::Highcharts$new()
rlev = levels(clara$region)
for(i in 1:length(rlev))
{
p1$series(data = toJSONArray2(clara[clara$region==rlev[i],,drop=F], json = F,names=T), name = rlev[i],type = c("bubble"), marker = list(radius = 3))
}
p1$plotOptions(bubble = list(pointPadding = 0, groupPadding = 0, borderWidth = 0))
p1$tooltip(useHTML = T, formatter="#!function () {
return '<b>Country: </b>' +
this.point.CountryName +
'</br><b>Human Hazard: </b>' +
this.point.y +
'</br><b>Natural Hazard: </b>' +
this.point.x +
'</br><b>ODA: </b>$' +
this.point.z;
}!#")
p1$colors("#443e42", "#f8c1b2", "#f0826d", "#8f1b13", "#8f1b13")
p1$legend(enabled = T)
p1
