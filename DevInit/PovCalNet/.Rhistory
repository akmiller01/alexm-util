read.csv("D:/Documents/Data/DHS map/matches.csv")
dat <- read.csv("D:/Documents/Data/DHS map/matches.csv")
View(dat)
dat$cc <- strsplit(dat$ccyear)[[1]][1]
dat$cc <- strsplit(dat$ccyear," ")[[1]][1]
dat$cc <- sapply(strsplit,dat$ccyear,split=" ")
dat$cc <- sapply(dat$ccyear,strsplit,split=" ")
sapply(dat$ccyear,strsplit,split=" ")
dat$ccyear
strsplit(dat$ccyear[1]," ")
library(varhandle)
dat <- read.csv("D:/Documents/Data/DHS map/matches.csv",as.is=TRUE)
sapply(dat$ccyear,strsplit,split=" ")
dat$cc <- sapply(dat$ccyear,strsplit,split=" ")
dat$cc
View(dat)
dat$cc <- sapply(dat$ccyear,strsplit,split=" ")[[1]]
View(dat)
dat$cc <- sapply(dat$ccyear,strsplit,split=" ")[[1]][1]
View(dat)
?substr
dat$cc <- sapply(dat$ccyear,substr,start=1,stop=2)
View(dat)
dat$year <- sapply(dat$ccyear,substr,start=2,stop=6)
View(dat)
dat$year <- sapply(dat$ccyear,substr,start=3,stop=6)
View(dat)
data <- read.csv("D:/Documents/Data/DHS map/matches.csv",as.is=TRUE)
data$cc <- sapply(data$ccyear,substr,start=1,stop=2)
data$year <- sapply(data$ccyear,substr,start=3,stop=6)
data <- read.csv("D:/Documents/Data/DHS map/matches.csv",as.is=TRUE)
View(data)
data$cc <- sapply(data$ccyear,substr,start=1,stop=2)
data$year <- sapply(data$ccyear,substr,start=3,stop=6)
data <- latestYear(data)
latestYear <- function(data)
{
return(
ddply(data,.(cc),function(x)
{
naLen <- nrow(x[which(is.na(x$value)),])
allLen <- nrow(x)
valueLen <- allLen-naLen
if(valueLen>=1)
{
for(i in 1:length(x$value))
{
if(!is.na(x$value[i])){
latestcc = x$cc[i]
latestYear = x$year[i]
latestVal = x$value[i]
}
}
}
else
{
latestcc = x$cc[1]
latestYear = max(x$year)
latestVal = NA
}
y <- c(latestYear,latestVal)
return(y)
}
)
)
}
data <- latestYear(data)
library(plyr)
latestYear <- function(data)
{
return(
ddply(data,.(cc),function(x)
{
naLen <- nrow(x[which(is.na(x$value)),])
allLen <- nrow(x)
valueLen <- allLen-naLen
if(valueLen>=1)
{
for(i in 1:length(x$value))
{
if(!is.na(x$value[i])){
latestcc = x$cc[i]
latestYear = x$year[i]
latestVal = x$value[i]
}
}
}
else
{
latestcc = x$cc[1]
latestYear = max(x$year)
latestVal = NA
}
y <- c(latestYear,latestVal)
return(y)
}
)
)
}
data <- latestYear(data)
latestYear <- function(data)
{
return(
ddply(data,.(cc),function(x)
{
for(i in 1:length(x$value))
{
if(!is.na(x$value[i])){
latestcc = x$cc[i]
latestYear = x$year[i]
latestVal = x$ccyear[i]
}
}
y <- c(latestYear,latestVal)
return(y)
}
)
)
}
data <- latestYear(data)
latestYear <- function(data)
{
return(
ddply(data,.(cc),function(x)
{
for(i in 1:length(x$value))
{
latestcc = x$cc[i]
latestYear = x$year[i]
latestVal = x$ccyear[i]
}
y <- c(latestYear,latestVal)
return(y)
}
)
)
}
data <- latestYear(data)
latestYear <- function(data)
{
return(
ddply(data,.(cc),function(x)
{
for(i in 1:length(x$ccyear))
{
latestcc = x$cc[i]
latestYear = x$year[i]
latestVal = x$ccyear[i]
}
y <- c(latestYear,latestVal)
return(y)
}
)
)
}
data <- latestYear(data)
View(data)
data2 <- read.csv("D:/Documents/Data/DHS map/matches.csv",as.is=TRUE)
data2$cc <- sapply(data2$ccyear,substr,start=1,stop=2)
data2$year <- sapply(data2$ccyear,substr,start=3,stop=6)
length(unique(data2$cc))
write.csv(data,"D:/Documents/Data/DHS map/matches_latest.csv",row.names=FALSE)
read.csv("D:/Documents/Data/DHS map/matches.csv",as.is=TRUE)
data$cc <- sapply(data$ccyear,substr,start=1,stop=2)
data$year <- sapply(data$ccyear,substr,start=3,stop=6)
data <- read.csv("D:/Documents/Data/DHS map/matches.csv",as.is=TRUE)
data$cc <- sapply(data$ccyear,substr,start=1,stop=2)
data$year <- sapply(data$ccyear,substr,start=3,stop=6)
names(data)
dat <- ddply(data,.(cc),function(x)
{
for(i in 1:length(x$ccyear))
{
latestName <- x$name[i]
latestCCyear = x$ccyear[i]
latestCC = x$cc[i]
latestYear = x$year[i]
}
y <- c(latestName,latestCCyear,latestCC,latestYear)
return(y)
}
)
View(dat)
dat <- ddply(data,.(cc),function(x)
{
for(i in 1:length(x$ccyear))
{
latestName <- x$name[i]
latestCCyear = x$ccyear[i]
latestYear = x$year[i]
}
y <- c(latestName,latestCCyear,latestYear)
return(y)
}
)
names(dat) <- c("cc","name","ccyear","year")
View(dat)
write.csv(dat,"D:/Documents/Data/DHS map/matches_latest.csv",row.names=FALSE)
# library("devtools")
# devtools::install_github("ankitrohatgi/digitizeR")
library("digitizeR")
app <- wpd.launch()
wpd.close(app)
# library("devtools")
# devtools::install_github("ankitrohatgi/digitizeR")
library("digitizeR")
app <- wpd.launch()
wpd.close(app)
# library("devtools")
# devtools::install_github("ankitrohatgi/digitizeR")
library("digitizeR")
app <- wpd.launch()
wpd.close(app)
library(data.table)
wd <- "C:/git/alexm-util/DevInit/PovCalNet/"
setwd(wd)
#
# dat <- read.csv("data.csv",as.is=TRUE,header=FALSE)
# names(dat) <- c("iso3","type","ppp","year","pop")
#
# dat <- dat[order(dat$iso3,dat$year),]
# dat <- data.table(dat)
# dat$latest <- rev(!duplicated(dat[,list(rev(dat$iso3))]))
# dat <- subset(dat,latest)
#
# dat <- data.frame(dat)
# dat$latest <- NULL
#
# write.csv(dat,"data_new.csv",row.names=FALSE)
dat <- read.csv("D:/Documents/Data/lorenze.csv",header=FALSE)
keep <- c("V1","V2","V3","V4","V7")
dat <- dat[keep]
names(dat) <- c("iso3","type","year","l","headcount")
dat <- dat[order(dat$iso3,dat$l),]
dat$headcount[which(dat$headcount>1)] <- dat$headcount[which(dat$headcount>1)]/100
dat$year <- round(dat$year)
pop <- read.csv("D:/Documents/Data/P20 baseline/undesa.pop.csv")
cc <- read.csv("D:/Documents/Data/P20 baseline/country-codes.csv")
cc <- cc[c("ISO3166.1.Alpha.3","ISO3166.1.numeric")]
names(cc) <- c("iso3","LocID")
pop <- subset(pop,Variant=="Medium" & Sex=="Both")
pop <- merge(pop,cc,by="LocID")
setnames(pop,"Time","year")
pop <- data.table(pop)
pop <- pop[,.(pop=sum(Value,na.rm=TRUE)*1000),by=.(year,iso3)]
dat <- merge(
dat
,pop
,by=c("iso3","year")
)
dat <- dat[order(dat$iso3,dat$l),]
dat$p <- dat$pop*dat$headcount
write.csv(dat,"lorenz.csv",row.names=FALSE)
dat <- data.table(dat)
lorenz <- dat[,.(p=sum(p,na.rm=TRUE)),by=.(l)]
lorenz <- lorenz[order(lorenz$l),]
plot(l~p,data=lorenz)
lorenz$logl <- log(lorenz$l)
fit <- lm(logl~p,data=lorenz)
summary(fit)
plot(logl~p,data=lorenz)
abline(fit)
logl <- NA
p <- 7200000000
new.data <- data.frame(logl,p)
exp(predict(fit,new.data))
yhat <- predict(fit,new.data)
new.data$logl <- yhat
plot(logl~p,data=rbind(lorenz,new.data,fill=TRUE))
abline(fit)
logl <- NA
p <- 7200000000*.2
new.data <- data.frame(logl,p)
exp(predict(fit,new.data))
p
summary(fit)
library(data.table)
wd <- "C:/git/alexm-util/DevInit/PovCalNet/"
setwd(wd)
#
# dat <- read.csv("data.csv",as.is=TRUE,header=FALSE)
# names(dat) <- c("iso3","type","ppp","year","pop")
#
# dat <- dat[order(dat$iso3,dat$year),]
# dat <- data.table(dat)
# dat$latest <- rev(!duplicated(dat[,list(rev(dat$iso3))]))
# dat <- subset(dat,latest)
#
# dat <- data.frame(dat)
# dat$latest <- NULL
#
# write.csv(dat,"data_new.csv",row.names=FALSE)
dat <- read.csv("D:/Documents/Data/lorenz.csv",header=FALSE)
keep <- c("V1","V2","V3","V4","V7")
dat <- dat[keep]
names(dat) <- c("iso3","type","year","l","headcount")
dat <- dat[order(dat$iso3,dat$l),]
dat$headcount[which(dat$headcount>1)] <- dat$headcount[which(dat$headcount>1)]/100
dat$year <- round(dat$year)
pop <- read.csv("D:/Documents/Data/P20 baseline/undesa.pop.csv")
cc <- read.csv("D:/Documents/Data/P20 baseline/country-codes.csv")
cc <- cc[c("ISO3166.1.Alpha.3","ISO3166.1.numeric")]
names(cc) <- c("iso3","LocID")
pop <- subset(pop,Variant=="Medium" & Sex=="Both")
pop <- merge(pop,cc,by="LocID")
setnames(pop,"Time","year")
pop <- data.table(pop)
pop <- pop[,.(pop=sum(Value,na.rm=TRUE)*1000),by=.(year,iso3)]
dat <- merge(
dat
,pop
,by=c("iso3","year")
)
dat <- dat[order(dat$iso3,dat$l),]
dat$p <- dat$pop*dat$headcount
write.csv(dat,"lorenz.csv",row.names=FALSE)
dat <- data.table(dat)
lorenz <- dat[,.(p=sum(p,na.rm=TRUE)),by=.(l)]
lorenz <- lorenz[order(lorenz$l),]
plot(l~p,data=lorenz)
lorenz$logl <- log(lorenz$l)
fit <- lm(logl~p,data=lorenz)
summary(fit)
plot(logl~p,data=lorenz)
abline(fit)
logl <- NA
p <- 7200000000
new.data <- data.frame(logl,p)
exp(predict(fit,new.data))
yhat <- predict(fit,new.data)
new.data$logl <- yhat
plot(logl~p,data=rbind(lorenz,new.data,fill=TRUE))
abline(fit)
logl <- NA
p <- 7200000000*.2
new.data <- data.frame(logl,p)
exp(predict(fit,new.data))
plot(l~p,data=lorenz)
plot(logl~p,data=lorenz)
abline(fit)
fit <- lm(logl~log(p),data=lorenz)
plot(logl~log(p),data=lorenz)
plot(l~log(p),data=lorenz)
plot(l~p,data=lorenz)
plot(sqrt(l)~p,data=lorenz)
fit <- lm(sqrt(l)~p,data=lorenz)
summary(fit)
plot(sqrt(l)~p,data=lorenz)
abline(fit)
fit <- lm(logl~p,data=lorenz)
summary(fit)
plot(logl~p,data=lorenz)
abline(fit)
logl <- NA
p <- 7200000000
new.data <- data.frame(logl,p)
exp(predict(fit,new.data))
yhat <- predict(fit,new.data)
new.data$logl <- yhat
plot(logl~p,data=rbind(lorenz,new.data,fill=TRUE))
abline(fit)
exp(predict(fit,new.data))
plot(l~p,data=lorenz)
exp(predict(fit,new.data))
logl <- NA
p <- 7200000000*.2
new.data <- data.frame(logl,p)
exp(predict(fit,new.data))
plot(logl~p,data=rbind(lorenz,new.data,fill=TRUE))
abline(fit)
library(data.table)
wd <- "C:/git/alexm-util/DevInit/PovCalNet/"
setwd(wd)
#
# dat <- read.csv("data.csv",as.is=TRUE,header=FALSE)
# names(dat) <- c("iso3","type","ppp","year","pop")
#
# dat <- dat[order(dat$iso3,dat$year),]
# dat <- data.table(dat)
# dat$latest <- rev(!duplicated(dat[,list(rev(dat$iso3))]))
# dat <- subset(dat,latest)
#
# dat <- data.frame(dat)
# dat$latest <- NULL
#
# write.csv(dat,"data_new.csv",row.names=FALSE)
dat <- read.csv("D:/Documents/Data/lorenz.csv",header=FALSE)
keep <- c("V1","V2","V3","V4","V7")
dat <- dat[keep]
names(dat) <- c("iso3","type","year","l","headcount")
dat <- dat[order(dat$iso3,dat$l),]
dat$headcount[which(dat$headcount>1)] <- dat$headcount[which(dat$headcount>1)]/100
dat$year <- round(dat$year)
pop <- read.csv("D:/Documents/Data/P20 baseline/undesa.pop.csv")
cc <- read.csv("D:/Documents/Data/P20 baseline/country-codes.csv")
cc <- cc[c("ISO3166.1.Alpha.3","ISO3166.1.numeric")]
names(cc) <- c("iso3","LocID")
pop <- subset(pop,Variant=="Medium" & Sex=="Both")
pop <- merge(pop,cc,by="LocID")
setnames(pop,"Time","year")
pop <- data.table(pop)
pop <- pop[,.(pop=sum(Value,na.rm=TRUE)*1000),by=.(year,iso3)]
dat <- merge(
dat
,pop
,by=c("iso3","year")
)
dat <- dat[order(dat$iso3,dat$l),]
dat$p <- dat$pop*dat$headcount
write.csv(dat,"lorenz.csv",row.names=FALSE)
dat <- data.table(dat)
lorenz <- dat[,.(p=sum(p,na.rm=TRUE)),by=.(l)]
lorenz <- lorenz[order(lorenz$l),]
plot(l~p,data=lorenz)
lorenz$logl <- log(lorenz$l)
fit <- lm(logl~p,data=lorenz)
summary(fit)
plot(logl~p,data=lorenz)
abline(fit)
logl <- NA
p <- 7200000000
new.data <- data.frame(logl,p)
exp(predict(fit,new.data))
yhat <- predict(fit,new.data)
new.data$logl <- yhat
plot(logl~p,data=rbind(lorenz,new.data,fill=TRUE))
abline(fit)
plot(logl~p,data=lorenz)
abline(fit)
summary(fit)
plot(l~p,data=lorenz)
sans.err <- lorenz
plot(l~p,data=sans.err)
sans.err <- subset(lorenz,l!=2)
plot(l~p,data=sans.err)
sans.err <- subset(lorenz,l!=2 & l!=2.5)
plot(l~p,data=sans.err)
sans.err <- subset(lorenz,l!=0.5 & l!=2 & l!=2.5)
plot(l~p,data=sans.err)
sans.err <- subset(lorenz,l>2.5)
plot(l~p,data=sans.err)
sans.err <- subset(lorenz,l>2.5 & l!=5)
plot(l~p,data=sans.err)
sans.err <- subset(lorenz,l>2.5 & l!=7)
plot(l~p,data=sans.err)
sans.err <- subset(lorenz,l>2.5 & l!=7.5)
plot(l~p,data=sans.err)
sans.err <- subset(lorenz,l>2.5 & l!=5.5)
plot(l~p,data=sans.err)
fit <- lm(logl~p,data=sans.err)
summary(fit)
plot(logl~p,data=sans.err)
abline(fit)
logl <- NA
p <- 7200000000*.2
new.data <- data.frame(logl,p)
exp(predict(fit,new.data))
logl <- NA
p <- 1400000000
new.data <- data.frame(logl,p)
exp(predict(fit,new.data))
