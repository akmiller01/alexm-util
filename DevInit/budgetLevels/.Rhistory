#
# gen hh_missing=0
# replace hh_missing=1 if educ_depriv==. | nutrihh==2 | attehh==2 | morthh==2 | (ls>0 & ls<.)
#
# foreach var in electricity_depriv sanitation_depriv water_depriv floor_depriv cookingfuel_depriv asset_depriv {
# gen w_`var'=1/18 if ls==0
# }
#
#
#
# gen w_mortality5hh = 1/6 if morthh==1 & nutrihh==1
# replace w_mortality5hh = 1/3 if morthh==1 & nutrihh==3
# replace w_mortality5hh = 0 if morthh==3 & nutrihh==1
#
# gen w_undernutritionhh = 1/6 if morthh==1 & nutrihh==1
# replace w_undernutritionhh = 1/3 if morthh==3 & nutrihh==1
# replace w_undernutritionhh = 0 if morthh==1 & nutrihh==3
#
#
#
# gen w_child_noattendhh = 1/6 if attehh==1 | attehh==3
#
# gen w_educ_depriv = 1/6 if educ_depriv<.
#
#
#
#
# *******************************************************************
# *********     Define the weigthed deprivation g0* matrix       ****
# *******************************************************************
#
# foreach var in `varlist_pov' {
# gen wg0_`var' = `var'*w_`var'
# }
#
# ******************************************************************************
# *********** Compute the frequency of missing values for indicator ************
# ******************************************************************************
#
# foreach var in `varlist_pov' {
# gen `var'_miss=1 if `var'==.
# replace `var'_miss=0 if `var'!=.
#     }
#
# sum *_miss
#
#
# ********************************************************************************
# *************   Define the (weighted) deprivation count vector "ci" ************
# ********************************************************************************
#
# egen ci=rsum(wg0_*)
# label variable ci "Deprivation Count"
#
# egen n_missing=rowmiss(wg0_*)
# label variable n_missing "Number of missing variables by individual"
# gen missing=(n_missing>0)
# label variable missing "Individual with missing variables"
#
# *** Check sample drop due to missing values
# tab missing
#
# *******************************************************************************
# ***** Create de identification vector (poor/non poor) *************************
# ***** and compute individual average of deprivation ***************************
# *******************************************************************************
#
# forvalues x=1(1)10 {
# gen h_`x'0p=(ci>=`x'/10)
# replace h_`x'0p=. if missing==1
# gen a_`x'0p=(ci) if h_`x'0p==1
# replace a_`x'0p=. if missing==1
# label var h_`x'0p "Condition of Multidimensional Poverty  k=`x'"
# label var a_`x'0p "Individual Average deprivation  k=`x'"
# }
#
# sum h_10p-a_100p [aw=weight_w]
#
#
#
# gen h_33p=(ci>=3.33/10)
# replace h_33p=. if missing==1
# gen a_33p=(ci) if h_33p==1
# replace a_33p=. if missing==1
# label var h_33p "Condition of Multidimensional Poverty  k=33.3"
# label var a_33p "Individual Average deprivation  k=33.3"
#
# sum h_33p a_33p [aw=weight_w]
#
#
#
#
# ********************************************************************************
#   ******* Compute raw headcounts        ******************************************
#   ********************************************************************************
#
#   foreach var in `varlist_pov' {
# gen `var'_raw=(`var')
#                 replace `var'_raw=. if missing==1
# }
#
# su *_raw  [iw=weight_w]
#
# ******************************************************************************
#   *********** Compute Censored headcount and censored headocunt ****************
#   ******************************************************************************
#   ***** Please define in the first line your poverty cutoff, the example shows k=33.3 is 33.3%
#
# local k=1/3
# foreach var in `varlist_pov' {
# *gen `var'_CH_`k'=(`var'==1 & h_`k'==1)
# *replace `var'_CH_`k'=. if missing==1
#
# gen `var'_CH_33=(`var'==1 & h_33==1)
#                   replace `var'_CH_33=. if missing==1
#
# }
#
# sum electricity_depriv_CH_33-educ_depriv_CH_33 [iw=weight_w]
# sum h_33 a_33 [iw=weight_w]
#
# *h = HC
# *a = intensity
#
#
#
#
# capture drop cedu chealth cls
#
# scalar drop _all
#
#
#
# gen cedu = (child_noattendhh_CH_33 *  w_child_noattendhh) + (educ_depriv_CH_33 * w_educ_depriv)
# sum cedu [iw=weight_w]
# scalar mpi_edu=r(mean)
#
#
# gen chealth = (mortality5hh_CH_33 * w_mortality5hh) + (undernutritionhh_CH_33 * w_undernutritionhh)
# sum chealth [iw=weight_w]
# scalar mpi_health=r(mean)
#
#
# gen cls = (electricity_depriv_CH_33 * w_electricity_depriv) + (sanitation_depriv_CH_33 * w_sanitation_depriv) + (water_depriv_CH_33 * w_water_depriv) + (floor_depriv_CH_33 * w_floor_depriv) + (cookingfuel_depriv_CH_33 * w_cookingfuel_depriv) + (asset_depriv_CH_33 * w_asset_depriv)
# sum cls [iw=weight_w]
# scalar mpi_ls=r(mean)
#
#
# sum a_33p [iw=weight_w]
# scalar intensity = r(mean)
# sum h_33p [iw=weight_w]
# scalar headcount = r(mean)
#
#
# scalar mpi=headcount*intensity
#
# scalar headcount100=headcount*100
# scalar intensity100=intensity*100
#
#
# scalar edu_contrib = (mpi_edu/mpi)*100
# scalar health_contrib = (mpi_health/mpi)*100
# scalar ls_contrib = (mpi_ls/mpi)*100
#
#
# capture drop uno
# gen uno=1 if h_33p<.
#
# sum uno [aw=weight_w] if h_33p<.
# scalar pop=r(sum_w)
#
# sum uno [aw=weight_w] if h_33p<. & ci>0 & ci<(1/3)
# scalar pop_vuln0=r(sum_w)
#
# sum uno [aw=weight_w] if h_33p<. & ci>=0.2 & ci<(1/3)
# scalar pop_vuln20=r(sum_w)
#
# sum uno [aw=weight_w] if h_33p<. & ci>=0.5
# scalar pop_severe=r(sum_w)
#
# scalar vulnerable0=(pop_vuln0/pop)*100
# scalar vulnerable20=(pop_vuln20/pop)*100
# scalar severity=(pop_severe/pop)*100
#
#
# * Sample size
#
# * HHs
# capture drop hh
# egen hh=group(hv001 hv002)
# sort age
# bys hh: gen n=_n
# gen nhh=1 if n==1
#
# * Individuals
#
# capture drop uno
# gen uno=1
#
# sum uno
# scalar ind_sample_tot=r(N)
# sum uno if h_33p<.
# scalar ind_sample_used=r(N)
#
# sum uno [w=weight_w] if h_33p<.
# scalar ind_sample_used_w=r(sum)
#
#
# sum nhh
# scalar hh_sample_tot=r(N)
#
# sum nhh if h_33p<.
# scalar hh_sample_used=r(N)
#
# sort hv001 hv002 hvidx
# sum nhh [w=weight_w] if h_33p<.
# scalar hh_sample_used_w=r(sum)
#
# * Inequality
# sum a_33p [aw=weight_w]
# scalar cv_ineq_poor = r(sd)/r(mean)
#
# sum ci [aw=weight_w] if h_33p<.
# scalar cv_ineq_hc = r(sd)/r(mean)
#
# sum ci [aw=weight_w] if h_33p<. & ci>0
# scalar cv_ineq_positive = r(sd)/r(mean)
#
# * CONTRIBUTION OF EACH DIMENSION FOR THE VULNERABLE POEPLE
# capture drop *vu
#
# foreach var in `varlist_pov' {
# gen `var'_CH_33vu=0 if h_33p<. & ci>=0.2 & ci<(1/3)
# replace `var'_CH_33vu=1 if `var'==1 & h_33p<. & ci>=0.2 & ci<(1/3)
# replace `var'_CH_33vu=. if missing==1
#     }
#
#
#
# gen ceduvu = (child_noattendhh_CH_33vu * w_child_noattendhh) + (educ_depriv_CH_33vu * w_educ_depriv)
# sum ceduvu [iw=weight_w] if h_33p<. & ci>=0.2 & ci<(1/3)
# scalar mpi_eduvu=r(mean)
#
#
# gen chealthvu = (mortality5hh_CH_33vu * w_mortality5hh) + (undernutritionhh_CH_33vu * w_undernutritionhh)
# sum chealthvu [iw=weight_w] if h_33p<. & ci>=0.2 & ci<(1/3)
# scalar mpi_healthvu=r(mean)
#
#
# gen clsvu = (asset_depriv_CH_33vu * w_asset_depriv) + (electricity_depriv_CH_33vu * w_electricity_depriv) + (sanitation_depriv_CH_33vu * w_sanitation_depriv) + (water_depriv_CH_33vu * w_water_depriv) + (floor_depriv_CH_33vu * w_floor_depriv) + (cookingfuel_depriv_CH_33vu * w_cookingfuel_depriv)
# sum clsvu [iw=weight_w] if h_33p<. & ci>=0.2 & ci<(1/3)
# scalar mpi_lsvu=r(mean)
#
# sum ci [iw=weight_w] if h_33p<. & ci>=0.2 & ci<(1/3)
# scalar headcountvu = r(mean)
#
#
# scalar headcountvu100=headcountvu*100
#
#
# scalar edu_contribvu = (mpi_eduvu/headcountvu100)*10000
# scalar health_contribvu = (mpi_healthvu/headcountvu100)*10000
# scalar ls_contribvu = (mpi_lsvu/headcountvu100)*10000
#
#
# * CONTRIBUTION OF EACH DIMENSION FOR THE VULNERABLE + POOR POEPLE (ci >= 0.2)
# capture drop *vupo
#
# foreach var in `varlist_pov' {
# gen `var'_CH_33vupo=0 if h_33p<. & ci>=0.2 & ci<.
# replace `var'_CH_33vupo=1 if `var'==1 & h_33p<. & ci>=0.2 & ci<.
# replace `var'_CH_33vupo=. if missing==1
#     }
#
#
#
# gen ceduvupo = (child_noattendhh_CH_33vupo * w_child_noattendhh) + (educ_depriv_CH_33vupo * w_educ_depriv)
# sum ceduvupo [iw=weight_w] if h_33p<. & ci>=0.2 & ci<.
# scalar mpi_eduvupo=r(mean)
#
#
# gen chealthvupo = (mortality5hh_CH_33vupo * w_mortality5hh) + (undernutritionhh_CH_33vupo * w_undernutritionhh)
# sum chealthvupo [iw=weight_w] if h_33p<. & ci>=0.2 & ci<.
# scalar mpi_healthvupo=r(mean)
#
#
# gen clsvupo = (asset_depriv_CH_33vupo * w_asset_depriv) + (electricity_depriv_CH_33vupo * w_electricity_depriv) + (sanitation_depriv_CH_33vupo * w_sanitation_depriv) + (water_depriv_CH_33vupo * w_water_depriv) + (floor_depriv_CH_33vupo * w_floor_depriv) + (cookingfuel_depriv_CH_33vupo * w_cookingfuel_depriv)
# sum clsvupo [iw=weight_w] if h_33p<. & ci>=0.2 & ci<.
# scalar mpi_lsvupo=r(mean)
#
# sum ci [iw=weight_w] if h_33p<. & ci>=0.2 & ci<.
# scalar headcountvupo = r(mean)
#
#
#
# scalar headcountvupo100=headcountvupo*100
#
#
# scalar edu_contribvupo = (mpi_eduvupo/headcountvupo100)*10000
# scalar health_contribvupo = (mpi_healthvupo/headcountvupo100)*10000
# scalar ls_contribvupo = (mpi_lsvupo/headcountvupo100)*10000
#
#
# scalar list mpi headcount100 intensity100 vulnerable0 vulnerable20 severity edu_contrib health_contrib ls_contrib edu_contribvu health_contribvu ls_contribvu edu_contribvupo health_contribvupo ls_contribvupo cv_ineq_poor cv_ineq_positive cv_ineq_hc hh_sample_tot hh_sample_used hh_sample_used_w ind_sample_tot ind_sample_used ind_sample_used_w
#
#
#
# sum sample_all [w=weight]
# scalar sall = r(sum)
# sum sample6y [w=weight_w]
# scalar smpi =  r(sum)
#
# scalar list sall smpi
# ************************************
#   **  ALWAYS CHECK THAT sall = smpi **
#   ************************************
#
View(dat)
br <- dat
View(br)
remove(child_died,child_died5)
remove(child_died,child_died5,child_died5hh,child_diedhh,nwomen_birth_15_49)
remove(child_died,child_died5,child_died5hh,child_diedhh,nwomen_birth_15_49,dat)
dat <- read.dta("D:/Documents/Data/DHSauto/ugir60dt/UGIR60FL.dta",convert.factors=FALSE)
dat$usual_res <- dat$v135==1
describe(dat$usual_res)
dat <- subset(dat,usual_res==TRUE)
describe(dat$usual_res)
children_diedhh <- data.table(dat)[,.(children_diedhh=sum(children_died,na.rm=TRUE),by=.(v001,v002))]
dat$children_died <- psum(dat$v206,dat$v207,na.rm=TRUE)
children_diedhh <- data.table(dat)[,.(children_diedhh=sum(children_died,na.rm=TRUE),by=.(v001,v002))]
View(children_diedhh)
View(dat)
children_diedhh <- data.table(dat)[,.(children_diedhh=sum(children_died,na.rm=TRUE)),by=.(v001,v002)]
View(children_diedhh)
dat <- merge(dat,children_diedhh,by=c("v001","v002"),all.x=TRUE)
remove(children_diedhh)
describe(dat$children_diedhh)
nwomen15_49 <- data.table(dat)[,.(sum(uno)),by=.(v001,v002)]
dat$uno <- 1
nwomen15_49 <- data.table(dat)[,.(sum(uno)),by=.(v001,v002)]
View(nwomen15_49)
nwomen15_49 <- data.table(dat)[,.(nwomen15_49=sum(uno)),by=.(v001,v002)]
View(nwomen15_49)
dat <- merge(dat,nwomen15_49,by=c("v001","v002"),all.x=TRUE)
describe(dat$nwomen15_49)
dat$uno <- NULL
remove(nwomen15_49)
dat <- dat[order(dat$v001,dat$v002,dat$v003),]
dat <- dat[order(dat$v001,dat$v002,dat$v003),]
dat$uno <- !duplicated( dat[,c("v001","v002")])
dat <- subset(dat,uno==TRUE)
setname
setnames
dat$uno <- NULL
names(dat)[which(names(dat)=="v001")] <- "hv001"
names(dat)[which(names(dat)=="v002")] <- "hv002"
names(dat)[which(names(dat)=="v003")] <- "hv003"
keep <- c("hv001","hv002","children_diedhh","nwomen15_49")
dat <- dat[keep]
dat <- dat[order(dat$hv001,dat$hv002),]
ir <- dat
remove(dat)
View(ir)
dat <- read.dta("D:/Documents/Data/DHSauto/ugpr60dt/UGPR60FL.dta",convert.factors=FALSE)
dat <- merge(dat,ir,by=c("hv001","hv002"),all.x=TRUE)
dat <- merge(dat,hh,by=c("hv001","hv002"),all.x=TRUE)
dat <- merge(dat,br,by=c("hv001","hv002"),all.x=TRUE)
dat$child_died5hh[which(dat$children_diedhh==0 & is.na(dat$child_died5hh))] <- 0
dat$child_diedhh[which(dat$children_diedhh==0 & is.na(dat$child_diedhh))] <- 0
dat$age <- dat$hv105
dat$age[which(dat$hv105>=98)] <- NA
hist(dat$age)
dat$sex <- NA
dat$sex[which(dat$hv104==1)] <- 1
dat$sex[which(dat$hv104==2)] <- 0
describe(dat$sex)
describe(dat$hv104)
dat$hh <- paste(dat$hv001,dat$hv002)
View(dat[c("hv001","hv002","hh")])
dat$usual_res <- dat$hv102==1
describe(dat$usual_res)
dat <- subset(dat,usual_res==TRUE)
dat$hhmembers_hh
hhmembers <- data.table(dat)[,.(hhmembers=sum(uno)),by=.(hh)]
dat$uno <- 1
hhmembers <- data.table(dat)[,.(hhmembers=sum(uno)),by=.(hh)]
dat <- merge(dat,hhmembers,by="hh",all.x=TRUE)
describe(dat$hhmembers)
remove(hhmembers)
dat$uno <- NULL
dat <- dat[order(dat$hv001,dat$hv002,dat$hvidx),]
load("D:/Documents/Data/MICSmeta/composite_global_wealth.RData")
View(dummies.final)
load("dummies.RData")
load("D:/Documents/Data/MICSmeta/dummies.RData")
View(dummies)
save(pca1,pca2,file="pcas.RData")
load("D:/Documents/Data/MICSmeta/pcas.RData")
pca1
wd <- "C:/git/alexm-util/DevInit/budgetLevels"
setwd(wd)
df <- read.csv("./results.csv"
, header = TRUE
,sep=","
,na.strings=c("","-","--")
,check.names=FALSE
,stringsAsFactors=FALSE
,colClasses = c("character","character","numeric",
"character","character","character",
"character","character","character",
"character","character","numeric")
)
names(df)[names(df) == "iso"] <- "id"
mult <- read.csv("D:/git/digital-platform/reference/imf_weo_ncu_deflator.2015.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
names(mult)[3] <- c("deflator")
mult$deflator[which(mult$id=="SY")] <- 1
#Have a PPP conversion for every year, but equal to 2015 rate for all years for all countries except for Syria
ppp <- read.csv("D:/git/digital-platform/reference/current-ncu-to-current-ppp.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
names(ppp)[3] <- "ppp"
sy.ppp <- subset(ppp,id=="SY")
ppp <- subset(ppp,year==2015 & id!="SY")
ppp$year <- NULL
somalia.ppp <- data.frame("id"="SO","ppp"=1)
ppp <- rbind(ppp,somalia.ppp)
years <- c(1980:2021)
ppp.frame <- data.frame("id"=sort(rep(ppp$id,length(years))),"year"=years)
ppp <- merge(ppp.frame,ppp,by="id")
ppp <- rbind(ppp,sy.ppp)
usd <- read.csv("D:/git/digital-platform/reference/current-ncu-to-current-usd.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
names(usd)[3] <- "usd"
sy.usd <- subset(usd,id=="SY")
usd <- subset(usd,year==2015 & id!="SY")
usd$year <- NULL
somalia.usd <- data.frame("id"="SO","usd"=1)
usd <- rbind(usd,somalia.usd)
years <- c(1980:2021)
usd.frame <- data.frame("id"=sort(rep(usd$id,length(years))),"year"=years)
usd <- merge(usd.frame,usd,by="id")
usd <- rbind(usd,sy.usd)
mult <- merge(mult,ppp,by=c("id","year"))
mult <- merge(mult,usd,by=c("id","year"))
mult$mult.ppp <- mult$deflator/mult$ppp
mult$mult.usd <- mult$deflator*mult$usd
mult$deflator <- NULL
mult$ppp <- NULL
mult$usd <- NULL
if("value-ncu" %in% colnames(df)){
names(df)[names(df)=="value-ncu"] <- "value.ncu"
df$value <- df$value.ncu
}else{
df$value.ncu <- df$value
}
df <- merge(
df
,mult
,by=c("id","year")
,all.x=TRUE
)
df <- transform(df,value.ppp=mult.ppp*value.ncu)
df <- transform(df,value=mult.usd*value.ncu)
df <- transform(df,l1=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l1))))
df <- transform(df,l2=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l2))))
df <- transform(df,l3=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l3))))
df <- transform(df,l4=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l4))))
df <- transform(df,l5=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l5))))
df <- transform(df,l6=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l6))))
keep <- c(1,2,5,6,7,8,9,10,11,12,13,16)
df <- df[keep]
names(df)[names(df) == "value.ncu"] <- "value-ncu"
names(df)[names(df) == "value.ppp"] <- "value-ppp"
names(df)[names(df) == "type"] <- "budget-type"
write.csv(df,"D:/git/digital-platform/country-year/domestic.csv",row.names=FALSE,na="")
names(df)
df <- read.csv("./results.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
levels <- df[c(6:11)]
levels <- reshape(
levels
,varying=1:6
,sep=""
,direction="long")
levels <- levels[c(1,2)]
names(levels) <- c("level","name")
levels <- unique(levels)[complete.cases(levels),]
levels <- transform(levels,id=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", name))))
levels$sectoral <- "FALSE"
levels <- levels[c(3,4,1,2)]
levels <- df[c(6:11)]
levels <- reshape(
levels
,varying=1:6
,sep=""
,direction="long")
levels <- levels[c(1,2)]
names(levels) <- c("level","name")
levels <- unique(levels)[complete.cases(unique(levels)),]
levels <- transform(levels,id=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", name))))
levels$sectoral <- "FALSE"
levels <- levels[c(3,4,1,2)]
old.levels <- read.csv("D:/git/digital-platform/reference/domestic-budget-level.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
sectoral <- subset(old.levels,sectoral==TRUE)
old.levels <- old.levels[c(1,2,3,5)]
levels <- merge(
levels
,old.levels
,by=intersect(names(levels),names(old.levels))
,all.x=TRUE
)
levels <- levels[order(levels$id)[!duplicated(sort(levels$id))],]
new.levels <- rbind(levels,sectoral)
new.levels <- unique(new.levels)
write.csv(new.levels,"D:/git/digital-platform/reference/domestic-budget-level.csv",row.names=FALSE,na="")
