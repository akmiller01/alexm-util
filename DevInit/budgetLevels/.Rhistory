levels <- c(levels,indMax)
}
pal <- colorBin(colors, c(indMin,indMax) , bins = levels)
}
}else{
conceptPath <- paste0(pathpre,"/git/digital-platform/concepts.csv")
concepts <- read.csv(conceptPath, header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
range <- concepts[which(concepts$id==indicator&concepts$series=="country-year"),]$range
if(!is.na(range)){
classes <- as.numeric(strsplit(range,",")[[1]])
levels <- classes[order(classes)]
indDat <- dat[[indicator]]
indDat <- indDat[which(!is.na(indDat))]
indMin <- min(indDat)
indMax <- max(indDat)
if(levels[1]>indMin){
levels <- c(indMin,levels)
}
if(levels[length(levels)]<indMax){
levels <- c(levels,indMax)
}
pal <- colorBin(colors, c(indMin,indMax) , bins = levels)
}else{
warning("Error reading range from concepts.csv. Choosing 5 chucks instead.")
pal <- colorQuantile(colors, NULL, n = 5)
}
}
popup <- paste0("<strong>District: </strong>",
districts2$district,
"<br><strong>",
indicator,
", ",
as.character(districts2$year),
": </strong>",
districts2[[indicator]])
stamen_tiles <- "http://{s}.tile.stamen.com/toner-lite/{z}/{x}/{y}.png"
stamen_attribution <- 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a href="http://openstreetmap.org">OpenStreetMap</a>, under <a href="http://www.openstreetmap.org/copyright">ODbL</a>.'
val<-districts2[[indicator]]
color<- pal(districts2[[indicator]])
legend <- data.frame(val,color,stringsAsFactors=FALSE)
legend <- ddply(legend,.(color),summarize,from=min(val),to=max(val),count=length(val),stringsAsFactors=FALSE)
legend <- legend[order(legend$from),]
legend$from.to <- paste(as.character(legend$from),as.character(legend$to),sep=" - ")
legend<- legend[c("color","from.to","count")]
for(i in 1:length(legend$from.to)){
if(legend$from.to[i]=="NA - NA"){
legend$from.to[i]="NA"
}
}
bp <- barplot(legend$count,
legend.text=legend$from.to,
beside=FALSE,
col=legend$color,
main = indicator)
text(bp, 0, round(legend$count, 1),cex=1,pos=3)
leaflet(data = districts2) %>%
#addTiles(urlTemplate = stamen_tiles,
#         attribution = stamen_attribution) %>%
setView(32, 1, zoom = 6) %>%
addPolygons(fillColor = ~pal(districts2[[indicator]]),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup)
}
##Syntax is:
#ug_leaflet(series,indicator,year,value,classes,colorRamp)
#Map appears in viewer, legend appears in plots along with count of data in those bins
#DPR
ug_leaflet("country-year","uganda-gov-spend-pp",2015,"value",5,diRamp("purple"))
ug_leaflet("country-year","uganda-gov-spend-pp",2015,"value",6,diRamp("purple"))
ug_leaflet("country-year","uganda-gov-spend-pp",2014,"value",5,diRamp("purple"))
ug_leaflet("country-year","uganda-gov-spend-pp",2014,"value",c(20,25,30,35),diRamp("purple"))
wd <- "C:/git/alexm-util/DevInit/budgetLevels"
setwd(wd)
df <- read.csv("./results.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
mult <- read.csv("C:/git/digital-platform/reference/current-ncu-to-constant-2012-usd.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
if("value-ncu" %in% colnames(df)){
names(df)[names(df)=="value-ncu"] <- "value.ncu"
df$value <- df$value.ncu
}else{
df$value.ncu <- df$value
}
for(i in 1:nrow(df)){
row = df[i,]
id = row[2][1,1]
year = row[3][1,1]
value = row[12][1,1]
multiplier = mult[which(mult$id==id),]
multiplier = multiplier[which(multiplier$year==year),3]
if(length(multiplier)<=0)
{
if(year!=2020){print(paste("No multiplier for:",id,year))}
df[i,12] = NA
}
else
{
value = value*multiplier
df[i,12] = value
}
}
View(mult)
names(mult)[names(df)=="value"] <- "value.mult"
names(mult)[names(mult)=="value"] <- "value.mult"
View(mult)
wd <- "C:/git/alexm-util/DevInit/budgetLevels"
setwd(wd)
df <- read.csv("./results.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
mult <- read.csv("C:/git/digital-platform/reference/current-ncu-to-constant-2012-usd.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
names(mult)[names(mult)=="value"] <- "value.mult"
if("value-ncu" %in% colnames(df)){
names(df)[names(df)=="value-ncu"] <- "value.ncu"
df$value <- df$value.ncu
}else{
df$value.ncu <- df$value
}
df <- merge(
df
,mult
,by=c("id","year")
)
View(mult)
View(df)
wd <- "C:/git/alexm-util/DevInit/budgetLevels"
setwd(wd)
df <- read.csv("./results.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
names(df)[names(df) == "iso"] <- "id"
mult <- read.csv("C:/git/digital-platform/reference/current-ncu-to-constant-2012-usd.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
names(mult)[names(mult)=="value"] <- "value.mult"
if("value-ncu" %in% colnames(df)){
names(df)[names(df)=="value-ncu"] <- "value.ncu"
df$value <- df$value.ncu
}else{
df$value.ncu <- df$value
}
df <- merge(
df
,mult
,by=c("id","year")
)
View(df)
df <- transform(df,value=value.mult*value.ncu)
View(df)
wd <- "C:/git/alexm-util/DevInit/budgetLevels"
setwd(wd)
df <- read.csv("./results.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
names(df)[names(df) == "iso"] <- "id"
mult <- read.csv("C:/git/digital-platform/reference/current-ncu-to-constant-2012-usd.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
names(mult)[names(mult)=="value"] <- "value.mult"
if("value-ncu" %in% colnames(df)){
names(df)[names(df)=="value-ncu"] <- "value.ncu"
df$value <- df$value.ncu
}else{
df$value.ncu <- df$value
}
df <- merge(
df
,mult
,by=c("id","year")
)
View(df)
df <- transform(df,value=value.mult*value.ncu)
df <- transform(df,l1=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l1))))
df <- transform(df,l2=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l2))))
df <- transform(df,l3=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l3))))
df <- transform(df,l4=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l4))))
df <- transform(df,l5=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l5))))
df <- transform(df,l6=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l6))))
View(df)
keep <- c(1,2,4,5,6,7,8,10,11,12,13)
df <- df[keep]
View(df)
wd <- "C:/git/alexm-util/DevInit/budgetLevels"
setwd(wd)
df <- read.csv("./results.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
names(df)[names(df) == "iso"] <- "id"
mult <- read.csv("C:/git/digital-platform/reference/current-ncu-to-constant-2012-usd.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
names(mult)[names(mult)=="value"] <- "value.mult"
if("value-ncu" %in% colnames(df)){
names(df)[names(df)=="value-ncu"] <- "value.ncu"
df$value <- df$value.ncu
}else{
df$value.ncu <- df$value
}
df <- merge(
df
,mult
,by=c("id","year")
)
df <- transform(df,value=value.mult*value.ncu)
df <- transform(df,l1=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l1))))
df <- transform(df,l2=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l2))))
df <- transform(df,l3=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l3))))
df <- transform(df,l4=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l4))))
df <- transform(df,l5=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l5))))
df <- transform(df,l6=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l6))))
View(df)
keep <- c(1,2,5,6,7,8,10,11,12,13)
df <- df[keep]
View(df)
names(df)[names(df) == "value.ncu"] <- "value-ncu"
names(df)[names(df) == "type"] <- "budget-type"
View(df)
write.csv(df,"./results_ncu.csv",row.names=FALSE,na="")
names(df)
levels <- df[c(4,5,6,7,8)]
View(levels)
?reshape
levels <- reshape(
levels
,times=c(1,2,3,4,5,6)
,direction="long")
levels <- reshape(
levels
,varying=c(1,2,3,4,5,6)
,times=c(1,2,3,4,5,6)
,direction="long")
names(levels)
levels <- reshape(
levels
,varying=c("l1","l2","l3","l4","l5","l6")
,times=c(1,2,3,4,5,6)
,direction="long")
levels <- reshape(
levels
,varying=c(1,2,3,4,5,6)
,times=c(1,2,3,4,5,6)
,sep=""
,direction="long")
levels <- reshape(
levels
,varying=c(1,2,3,4,5,6)
,sep=""
,direction="long")
levels <- reshape(
levels
,varying=c(1,2,3,4,5,6)
,sep="l"
,direction="long")
levels <- df[c(4,5,6,7,8)]
levels$id <- rep(1)
levels$id <- 1:nrow(levels)
View(levels)
levels <- df[c(4,5,6,7,8)]
levels$id <- 1:nrow(levels)
levels <- reshape(
levels
,varying=1:6
,sep=""
,direction="long")
levels <- reshape(
levels
,idvar="id"
,varying=1:6
,sep=""
,direction="long")
1:6
View(levels)
levels <- df[c(4,5,6,7,8)]
levels <- reshape(
levels
,varying=1:5
,sep=""
,direction="long")
View(levels)
levels <- df[c(4,5,6,7,8)]
levels <- reshape(
levels
,varying=1:5
,sep=""
,direction="long")
View(levels)
levels <- levels(1:2)
levels <- df[c(4,5,6,7,8)]
levels <- reshape(
levels
,varying=1:5
,sep=""
,direction="long")
levels <- levels(c(1,2))
levels <- df[c(4,5,6,7,8)]
levels <- reshape(
levels
,varying=1:5
,sep=""
,direction="long")
levels <- levels[c(1,2)]
View(levels)
levels <- levels[c(2,1)]
wd <- "C:/git/alexm-util/DevInit/budgetLevels"
setwd(wd)
df <- read.csv("./results.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
names(df)[names(df) == "iso"] <- "id"
mult <- read.csv("C:/git/digital-platform/reference/current-ncu-to-constant-2012-usd.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
names(mult)[names(mult)=="value"] <- "value.mult"
if("value-ncu" %in% colnames(df)){
names(df)[names(df)=="value-ncu"] <- "value.ncu"
df$value <- df$value.ncu
}else{
df$value.ncu <- df$value
}
df <- merge(
df
,mult
,by=c("id","year")
)
df <- transform(df,value=value.mult*value.ncu)
levels <- df[c(4,5,6,7,8)]
df <- transform(df,l1=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l1))))
df <- transform(df,l2=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l2))))
df <- transform(df,l3=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l3))))
df <- transform(df,l4=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l4))))
df <- transform(df,l5=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l5))))
df <- transform(df,l6=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l6))))
keep <- c(1,2,5,6,7,8,10,11,12,13)
df <- df[keep]
names(df)[names(df) == "value.ncu"] <- "value-ncu"
names(df)[names(df) == "type"] <- "budget-type"
write.csv(df,"./results_ncu.csv",row.names=FALSE,na="")
###Budget levels
levels <- reshape(
levels
,varying=1:5
,sep=""
,direction="long")
View(levels)
wd <- "C:/git/alexm-util/DevInit/budgetLevels"
setwd(wd)
df <- read.csv("./results.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
names(df)[names(df) == "iso"] <- "id"
mult <- read.csv("C:/git/digital-platform/reference/current-ncu-to-constant-2012-usd.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
names(mult)[names(mult)=="value"] <- "value.mult"
if("value-ncu" %in% colnames(df)){
names(df)[names(df)=="value-ncu"] <- "value.ncu"
df$value <- df$value.ncu
}else{
df$value.ncu <- df$value
}
df <- merge(
df
,mult
,by=c("id","year")
)
df <- transform(df,value=value.mult*value.ncu)
wd <- "C:/git/alexm-util/DevInit/budgetLevels"
setwd(wd)
df <- read.csv("./results.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
names(df)[names(df) == "iso"] <- "id"
levels <- df[c(4,5,6,7,8)]
View(levels)
levels <- df[c(6:12)]
View(levels)
levels <- df[c(6:11)]
View(levels)
levels <- reshape(
levels
,varying=1:5
,sep=""
,direction="long")
View(levels)
wd <- "C:/git/alexm-util/DevInit/budgetLevels"
setwd(wd)
df <- read.csv("./results.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
names(df)[names(df) == "iso"] <- "id"
levels <- df[c(6:11)]
levels <- reshape(
levels
,varying=1:6
,sep=""
,direction="long")
View(levels)
levels <- levels[c(1,2)]
names(levels) <- c("level","name")
View(levels)
levels <- unique(levels)
View(levels)
levels <- unique(levels)[complete.cases(levels),]
View(levels)
levels$id <- gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", name)))
levels <- transform(levels,id=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", name))))
View(levels)
levels$sectoral <- "FALSE"
View(levels)
levels <- levels[c(3,4,1,2)]
View(levels)
old.levels <- read.csv("C:/git/digital-platform/reference/domestic-budget-level.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
View(old.levels)
names(old.levels)
old.levels <- old.levels[c(1,2,3,5)]
View(old.levels)
levels <- merge(
levels
,old.levels
,by=intersect(names(levels),names(old.levels))
,all.x=TRUE
)
View(levels)
View(levels[order(levels["color-id"])])
View(levels[order(levels["color-id"]),])
?merge
levels <- reshape(
levels
,varying=1:6
,sep=""
,direction="long")
levels <- levels[c(1,2)]
names(levels) <- c("level","name")
levels <- unique(levels)[complete.cases(levels),]
levels <- transform(levels,id=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", name))))
levels$sectoral <- "FALSE"
levels <- levels[c(3,4,1,2)]
wd <- "C:/git/alexm-util/DevInit/budgetLevels"
setwd(wd)
df <- read.csv("./results.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
names(df)[names(df) == "iso"] <- "id"
levels <- df[c(6:11)]
levels <- reshape(
levels
,varying=1:6
,sep=""
,direction="long")
levels <- levels[c(1,2)]
names(levels) <- c("level","name")
levels <- unique(levels)[complete.cases(levels),]
levels <- transform(levels,id=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", name))))
levels$sectoral <- "FALSE"
levels <- levels[c(3,4,1,2)]
levels <- df[c(6:11)]
levels <- reshape(
levels
,varying=1:6
,sep=""
,direction="long")
levels <- levels[c(1,2)]
names(levels) <- c("level","name")
levels <- unique(levels)[complete.cases(unique(levels)),]
levels <- transform(levels,id=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", name))))
levels$sectoral <- "FALSE"
levels <- levels[c(3,4,1,2)]
View(levels)
old.levels <- read.csv("C:/git/digital-platform/reference/domestic-budget-level.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
old.levels <- old.levels[c(1,2,3,5)]
levels <- merge(
levels
,old.levels
,by=intersect(names(levels),names(old.levels))
,all.x=TRUE
)
nrow(levels)
length(unique(levels$id))
duplicated(levels)
order(levels)[!duplicated(sort(levels))]
order(levels)
order(levels$id)[!duplicated(sort(levels$id))]
levels <- levels[order(levels$id)[!duplicated(sort(levels$id))],]
View(levels)
View(levels[order(levels["color-id"]),])
write.csv(levels,"./results_levels.csv",row.names=FALSE,na="")
wd <- "C:/git/alexm-util/DevInit/budgetLevels"
setwd(wd)
df <- read.csv("./results.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
names(df)[names(df) == "iso"] <- "id"
levels <- df[c(6:11)]
mult <- read.csv("C:/git/digital-platform/reference/current-ncu-to-constant-2012-usd.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
names(mult)[names(mult)=="value"] <- "value.mult"
if("value-ncu" %in% colnames(df)){
names(df)[names(df)=="value-ncu"] <- "value.ncu"
df$value <- df$value.ncu
}else{
df$value.ncu <- df$value
}
df <- merge(
df
,mult
,by=c("id","year")
,all.x=TRUE
)
df <- transform(df,value=value.mult*value.ncu)
df <- transform(df,l1=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l1))))
df <- transform(df,l2=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l2))))
df <- transform(df,l3=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l3))))
df <- transform(df,l4=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l4))))
df <- transform(df,l5=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l5))))
df <- transform(df,l6=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", l6))))
keep <- c(1,2,5,6,7,8,10,11,12,13)
df <- df[keep]
names(df)[names(df) == "value.ncu"] <- "value-ncu"
names(df)[names(df) == "type"] <- "budget-type"
write.csv(df,"./results_ncu.csv",row.names=FALSE,na="")
###Budget levels
levels <- reshape(
levels
,varying=1:6
,sep=""
,direction="long")
levels <- levels[c(1,2)]
names(levels) <- c("level","name")
levels <- unique(levels)[complete.cases(unique(levels)),]
levels <- transform(levels,id=gsub(" ","-",tolower(gsub("[^[:alnum:] ]", "", name))))
levels$sectoral <- "FALSE"
levels <- levels[c(3,4,1,2)]
old.levels <- read.csv("C:/git/digital-platform/reference/domestic-budget-level.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
old.levels <- old.levels[c(1,2,3,5)]
levels <- merge(
levels
,old.levels
,by=intersect(names(levels),names(old.levels))
,all.x=TRUE
)
###Remove duplicates by id
levels <- levels[order(levels$id)[!duplicated(sort(levels$id))],]
write.csv(levels,"./results_levels.csv",row.names=FALSE,na="")
